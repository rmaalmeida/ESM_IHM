gplink-1.4.2 #1169 (Jan  2 2016)
Copyright (c) 1998-2015 gputils project
Listing File Generated: 6-18-2017  23:16:49
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_adcInit
                                           	global	_adcRead
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_adc__adcRead	code
                                           _adcRead:
                                           ;	.line	31; adc.c	int adcRead(void) {
001f34   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001f36   ffe5
001f38   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001f3a   ffd9
001f3c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001f3e   ffe5
001f40   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001f42   ffe5
001f44   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001f46   ffe5
001f48   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001f4a   ffe5
                                           ;	.line	33; adc.c	ADCON0 |= 0b00000010; //inicia conversao
001f4c   ee0f     lfsr    0x0, 0xfc2       	LFSR	0x00, 0xfc2
001f4e   f0c2
001f50   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001f52   f000
001f54   8200     bsf     0x00, 0x1, 0x0   	BSF	r0x00, 1
001f56   ee0f     lfsr    0x0, 0xfc2       	LFSR	0x00, 0xfc2
001f58   f0c2
001f5a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001f5c   ffef
                                           _00110_DS_:
                                           ;	.line	35; adc.c	while (BitTst(ADCON0, 1)); // espera terminar a conversão;
001f5e   ee0f     lfsr    0x0, 0xfc2       	LFSR	0x00, 0xfc2
001f60   f0c2
001f62   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001f64   f000
001f66   b200     btfsc   0x00, 0x1, 0x0   	BTFSC	r0x00, 1
001f68   d7fa     bra     0x001f5e         	BRA	_00110_DS_
                                           ;	.line	37; adc.c	ADvalor = ADRESH; // le o resultado
001f6a   ee0f     lfsr    0x0, 0xfc4       	LFSR	0x00, 0xfc4
001f6c   f0c4
001f6e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001f70   f000
001f72   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           ;	.line	38; adc.c	ADvalor <<= 8;
001f74   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001f76   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001f78   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ;	.line	39; adc.c	ADvalor += ADRESL;
001f7a   ee0f     lfsr    0x0, 0xfc3       	LFSR	0x00, 0xfc3
001f7c   f0c3
001f7e   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001f80   f002
001f82   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001f84   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001f86   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001f88   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001f8a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
                                           ;	.line	40; adc.c	return ADvalor;
001f8c   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001f8e   fff3
001f90   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001f92   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001f94   f003
001f96   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001f98   f002
001f9a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001f9c   f001
001f9e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001fa0   f000
001fa2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001fa4   ffd9
001fa6   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_adc__adcInit	code
                                           _adcInit:
                                           ;	.line	23; adc.c	void adcInit(void) {
0026ac   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0026ae   ffe5
0026b0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0026b2   ffd9
0026b4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0026b6   ffe5
                                           ;	.line	24; adc.c	BitSet(TRISA, 0); //seta o bit 0 como entrada
0026b8   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
0026ba   f092
0026bc   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0026be   f000
0026c0   8000     bsf     0x00, 0x0, 0x0   	BSF	r0x00, 0
0026c2   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
0026c4   f092
0026c6   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0026c8   ffef
                                           ;	.line	26; adc.c	ADCON0 = 0b00000001; //seleciona o canal 0 e liga o ad
0026ca   ee0f     lfsr    0x0, 0xfc2       	LFSR	0x00, 0xfc2
0026cc   f0c2
0026ce   0e01     movlw   0x01             	MOVLW	0x01
0026d0   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	27; adc.c	ADCON1 = 0b00001110; //apenas AN0 é analogico, a referencia é baseada na fonte
0026d2   ee0f     lfsr    0x0, 0xfc1       	LFSR	0x00, 0xfc1
0026d4   f0c1
0026d6   0e0e     movlw   0x0e             	MOVLW	0x0e
0026d8   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	28; adc.c	ADCON2 = 0b10101010; //FOSC /32, Alinhamento à direita e tempo de conv = 12 TAD
0026da   ee0f     lfsr    0x0, 0xfc0       	LFSR	0x00, 0xfc0
0026dc   f0c0
0026de   0eaa     movlw   0xaa             	MOVLW	0xaa
0026e0   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
0026e2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0026e4   f000
0026e6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0026e8   ffd9
0026ea   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  180 (0x00b4) bytes ( 0.14%)
                                           ;           	   90 (0x005a) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_kernelInit
                                           	global	_kernelAddProc
                                           	global	_kernelLoop
                                           	global	_ini
                                           	global	_fim
                                           	global	_pool
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrget3
                                           	extern	__modsint
                                           	extern	__mulint
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           INTCON	equ	0xff2
                                           WREG	equ	0xfe8
                                           TOSL	equ	0xffd
                                           TOSH	equ	0xffe
                                           TOSU	equ	0xfff
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           
                                           udata_kernel_0	udata
                                           _ini	res	2
                                           
                                           udata_kernel_1	udata
                                           _fim	res	2
                                           
                                           udata_kernel_2	udata
                                           _pool	res	30
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_kernel__kernelLoop	code
                                           _kernelLoop:
                                           ;	.line	42; kernel.c	void kernelLoop(void){
000aba   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000abc   ffe5
000abe   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000ac0   ffd9
000ac2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000ac4   ffe5
000ac6   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000ac8   ffe5
000aca   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000acc   ffe5
                                           _00128_DS_:
000ace   0100     movlb   0x0              	BANKSEL	_ini
                                           ;	.line	45; kernel.c	if (ini != fim){
000ad0   51b4     movf    0xb4, 0x0, 0x1   	MOVF	_ini, W, B
000ad2   0100     movlb   0x0              	BANKSEL	_fim
000ad4   19b6     xorwf   0xb6, 0x0, 0x1   	XORWF	_fim, W, B
000ad6   e105     bnz     0x000ae2         	BNZ	_00142_DS_
000ad8   0100     movlb   0x0              	BANKSEL	(_ini + 1)
000ada   51b5     movf    0xb5, 0x0, 0x1   	MOVF	(_ini + 1), W, B
000adc   0100     movlb   0x0              	BANKSEL	(_fim + 1)
000ade   19b7     xorwf   0xb7, 0x0, 0x1   	XORWF	(_fim + 1), W, B
000ae0   e0f6     bz      0x000ace         	BZ	_00128_DS_
                                           _00142_DS_:
000ae2   0100     movlb   0x0              	BANKSEL	(_ini + 1)
                                           ;	.line	47; kernel.c	if (pool[ini]->function() == REPEAT){
000ae4   51b5     movf    0xb5, 0x0, 0x1   	MOVF	(_ini + 1), W, B
000ae6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ae8   0100     movlb   0x0              	BANKSEL	_ini
000aea   51b4     movf    0xb4, 0x0, 0x1   	MOVF	_ini, W, B
000aec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000aee   0e00     movlw   0x00             	MOVLW	0x00
000af0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000af2   0e03     movlw   0x03             	MOVLW	0x03
000af4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000af6   ec5e     call    0x0018bc, 0x0call    0x0018bc, 0x0 	CALL	__mulint
000af8   f00c
000afa   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000afc   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000afe   f001
000b00   0e04     movlw   0x04             	MOVLW	0x04
000b02   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000b04   0e80     movlw   0x80             	MOVLW	LOW(_pool)
000b06   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000b08   0e00     movlw   0x00             	MOVLW	HIGH(_pool)
000b0a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000b0c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000b0e   ffe9
000b10   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000b12   ffea
000b14   cfee     movff   0xfee, 0x000     	MOVFF	POSTINC0, r0x00
000b16   f000
000b18   cfee     movff   0xfee, 0x001     	MOVFF	POSTINC0, r0x01
000b1a   f001
000b1c   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000b1e   f002
000b20   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000b22   ffe9
000b24   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
000b26   fff3
000b28   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000b2a   ecae     call    0x00275c, 0x0call    0x00275c, 0x0 	CALL	__gptrget3
000b2c   f013
000b2e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000b30   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000b32   f001
000b34   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000b36   f002
000b38   cff2     movff   0xff2, 0xfe5     	MOVFF	INTCON, POSTDEC1
000b3a   ffe5
000b3c   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	INTCON, 7
000b3e   0005     push                     	PUSH	
000b40   0e5c     movlw   0x5c             	MOVLW	LOW(_00143_DS_)
000b42   6efd     movwf   0xfd, 0x0        	MOVWF	TOSL
000b44   0e0b     movlw   0x0b             	MOVLW	HIGH(_00143_DS_)
000b46   6efe     movwf   0xfe, 0x0        	MOVWF	TOSH
000b48   0e00     movlw   0x00             	MOVLW	UPPER(_00143_DS_)
000b4a   6eff     movwf   0xff, 0x0        	MOVWF	TOSU
000b4c   bee4     btfsc   0xe4, 0x7, 0x0   	BTFSC	PREINC1, 7
000b4e   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	INTCON, 7
000b50   c002     movff   0x002, 0xffb     	MOVFF	r0x02, PCLATU
000b52   fffb
000b54   c001     movff   0x001, 0xffa     	MOVFF	r0x01, PCLATH
000b56   fffa
000b58   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000b5a   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00143_DS_:
000b5c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000b5e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000b60   0a02     xorlw   0x02             	XORLW	0x02
000b62   e129     bnz     0x000bb6         	BNZ	_00124_DS_
                                           _00145_DS_:
000b64   0100     movlb   0x0              	BANKSEL	(_ini + 1)
                                           ;	.line	48; kernel.c	kernelAddProc(pool[ini]);
000b66   51b5     movf    0xb5, 0x0, 0x1   	MOVF	(_ini + 1), W, B
000b68   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b6a   0100     movlb   0x0              	BANKSEL	_ini
000b6c   51b4     movf    0xb4, 0x0, 0x1   	MOVF	_ini, W, B
000b6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b70   0e00     movlw   0x00             	MOVLW	0x00
000b72   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b74   0e03     movlw   0x03             	MOVLW	0x03
000b76   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b78   ec5e     call    0x0018bc, 0x0call    0x0018bc, 0x0 	CALL	__mulint
000b7a   f00c
000b7c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000b7e   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000b80   f001
000b82   0e04     movlw   0x04             	MOVLW	0x04
000b84   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000b86   0e80     movlw   0x80             	MOVLW	LOW(_pool)
000b88   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000b8a   0e00     movlw   0x00             	MOVLW	HIGH(_pool)
000b8c   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000b8e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000b90   ffe9
000b92   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000b94   ffea
000b96   cfee     movff   0xfee, 0x000     	MOVFF	POSTINC0, r0x00
000b98   f000
000b9a   cfee     movff   0xfee, 0x001     	MOVFF	POSTINC0, r0x01
000b9c   f001
000b9e   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000ba0   f002
000ba2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000ba4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ba6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000ba8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000baa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000bac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bae   ec20     call    0x000e40, 0x0call    0x000e40, 0x0 	CALL	_kernelAddProc
000bb0   f007
000bb2   0e03     movlw   0x03             	MOVLW	0x03
000bb4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00124_DS_:
000bb6   0100     movlb   0x0              	BANKSEL	_ini
                                           ;	.line	51; kernel.c	ini = (ini+1)%POOLSIZE;
000bb8   51b4     movf    0xb4, 0x0, 0x1   	MOVF	_ini, W, B
000bba   0f01     addlw   0x01             	ADDLW	0x01
000bbc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000bbe   0e00     movlw   0x00             	MOVLW	0x00
000bc0   0100     movlb   0x0              	BANKSEL	(_ini + 1)
000bc2   21b5     addwfc  0xb5, 0x0, 0x1   	ADDWFC	(_ini + 1), W, B
000bc4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000bc6   0e00     movlw   0x00             	MOVLW	0x00
000bc8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bca   0e0a     movlw   0x0a             	MOVLW	0x0a
000bcc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bce   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000bd0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bd2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000bd4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bd6   ec15     call    0x00102a, 0x0call    0x00102a, 0x0 	CALL	__modsint
000bd8   f008
000bda   0100     movlb   0x0              	BANKSEL	_ini
000bdc   6fb4     movwf   0xb4, 0x1        	MOVWF	_ini, B
000bde   cff3     movff   0xff3, 0x0b5     	MOVFF	PRODL, (_ini + 1)
000be0   f0b5
000be2   0e04     movlw   0x04             	MOVLW	0x04
000be4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000be6   d773     bra     0x000ace         	BRA	_00128_DS_
000be8   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000bea   f002
000bec   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000bee   f001
000bf0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000bf2   f000
000bf4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000bf6   ffd9
000bf8   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_kernel__kernelAddProc	code
                                           _kernelAddProc:
                                           ;	.line	32; kernel.c	char kernelAddProc(process * newProc){
000e40   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000e42   ffe5
000e44   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000e46   ffd9
000e48   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000e4a   ffe5
000e4c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000e4e   ffe5
000e50   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000e52   ffe5
000e54   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
000e56   ffe5
000e58   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
000e5a   ffe5
000e5c   0e02     movlw   0x02             	MOVLW	0x02
000e5e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000e60   f000
000e62   0e03     movlw   0x03             	MOVLW	0x03
000e64   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
000e66   f001
000e68   0e04     movlw   0x04             	MOVLW	0x04
000e6a   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
000e6c   f002
000e6e   0100     movlb   0x0              	BANKSEL	_fim
                                           ;	.line	34; kernel.c	if ( ((fim+1)%POOLSIZE) != ini){
000e70   51b6     movf    0xb6, 0x0, 0x1   	MOVF	_fim, W, B
000e72   0f01     addlw   0x01             	ADDLW	0x01
000e74   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000e76   0e00     movlw   0x00             	MOVLW	0x00
000e78   0100     movlb   0x0              	BANKSEL	(_fim + 1)
000e7a   21b7     addwfc  0xb7, 0x0, 0x1   	ADDWFC	(_fim + 1), W, B
000e7c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000e7e   0e00     movlw   0x00             	MOVLW	0x00
000e80   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e82   0e0a     movlw   0x0a             	MOVLW	0x0a
000e84   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e86   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000e88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e8a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000e8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e8e   ec15     call    0x00102a, 0x0call    0x00102a, 0x0 	CALL	__modsint
000e90   f008
000e92   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000e94   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
000e96   f004
000e98   0e04     movlw   0x04             	MOVLW	0x04
000e9a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000e9c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000e9e   0100     movlb   0x0              	BANKSEL	_ini
000ea0   19b4     xorwf   0xb4, 0x0, 0x1   	XORWF	_ini, W, B
000ea2   e105     bnz     0x000eae         	BNZ	_00118_DS_
000ea4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000ea6   0100     movlb   0x0              	BANKSEL	(_ini + 1)
000ea8   19b5     xorwf   0xb5, 0x0, 0x1   	XORWF	(_ini + 1), W, B
000eaa   e101     bnz     0x000eae         	BNZ	_00118_DS_
000eac   d039     bra     0x000f20         	BRA	_00111_DS_
                                           _00118_DS_:
000eae   0100     movlb   0x0              	BANKSEL	(_fim + 1)
                                           ;	.line	35; kernel.c	pool[fim] = newProc;
000eb0   51b7     movf    0xb7, 0x0, 0x1   	MOVF	(_fim + 1), W, B
000eb2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eb4   0100     movlb   0x0              	BANKSEL	_fim
000eb6   51b6     movf    0xb6, 0x0, 0x1   	MOVF	_fim, W, B
000eb8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eba   0e00     movlw   0x00             	MOVLW	0x00
000ebc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ebe   0e03     movlw   0x03             	MOVLW	0x03
000ec0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ec2   ec5e     call    0x0018bc, 0x0call    0x0018bc, 0x0 	CALL	__mulint
000ec4   f00c
000ec6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000ec8   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
000eca   f004
000ecc   0e04     movlw   0x04             	MOVLW	0x04
000ece   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000ed0   0e80     movlw   0x80             	MOVLW	LOW(_pool)
000ed2   2603     addwf   0x03, 0x1, 0x0   	ADDWF	r0x03, F
000ed4   0e00     movlw   0x00             	MOVLW	HIGH(_pool)
000ed6   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
000ed8   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
000eda   ffe9
000edc   c004     movff   0x004, 0xfea     	MOVFF	r0x04, FSR0H
000ede   ffea
000ee0   c000     movff   0x000, 0xfee     	MOVFF	r0x00, POSTINC0
000ee2   ffee
000ee4   c001     movff   0x001, 0xfee     	MOVFF	r0x01, POSTINC0
000ee6   ffee
000ee8   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000eea   ffef
000eec   0100     movlb   0x0              	BANKSEL	_fim
                                           ;	.line	36; kernel.c	fim = (fim+1)%POOLSIZE;
000eee   51b6     movf    0xb6, 0x0, 0x1   	MOVF	_fim, W, B
000ef0   0f01     addlw   0x01             	ADDLW	0x01
000ef2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000ef4   0e00     movlw   0x00             	MOVLW	0x00
000ef6   0100     movlb   0x0              	BANKSEL	(_fim + 1)
000ef8   21b7     addwfc  0xb7, 0x0, 0x1   	ADDWFC	(_fim + 1), W, B
000efa   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000efc   0e00     movlw   0x00             	MOVLW	0x00
000efe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f00   0e0a     movlw   0x0a             	MOVLW	0x0a
000f02   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f04   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000f06   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f08   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000f0a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f0c   ec15     call    0x00102a, 0x0call    0x00102a, 0x0 	CALL	__modsint
000f0e   f008
000f10   0100     movlb   0x0              	BANKSEL	_fim
000f12   6fb6     movwf   0xb6, 0x1        	MOVWF	_fim, B
000f14   cff3     movff   0xff3, 0x0b7     	MOVFF	PRODL, (_fim + 1)
000f16   f0b7
000f18   0e04     movlw   0x04             	MOVLW	0x04
000f1a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	37; kernel.c	return SUCCESS;
000f1c   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
000f1e   d001     bra     0x000f22         	BRA	_00112_DS_
                                           _00111_DS_:
                                           ;	.line	39; kernel.c	return FAIL;
000f20   0e01     movlw   0x01             	MOVLW	0x01
                                           _00112_DS_:
000f22   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
000f24   f004
000f26   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
000f28   f003
000f2a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000f2c   f002
000f2e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000f30   f001
000f32   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000f34   f000
000f36   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000f38   ffd9
000f3a   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_kernel__kernelInit	code
                                           _kernelInit:
                                           ;	.line	27; kernel.c	char kernelInit(void){
002952   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002954   ffe5
002956   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002958   ffd9
00295a   0100     movlb   0x0              	BANKSEL	_ini
                                           ;	.line	28; kernel.c	ini = 0;
00295c   6bb4     clrf    0xb4, 0x1        	CLRF	_ini, B
00295e   0100     movlb   0x0              	BANKSEL	(_ini + 1)
002960   6bb5     clrf    0xb5, 0x1        	CLRF	(_ini + 1), B
002962   0100     movlb   0x0              	BANKSEL	_fim
                                           ;	.line	29; kernel.c	fim = 0;
002964   6bb6     clrf    0xb6, 0x1        	CLRF	_fim, B
002966   0100     movlb   0x0              	BANKSEL	(_fim + 1)
002968   6bb7     clrf    0xb7, 0x1        	CLRF	(_fim + 1), B
                                           ;	.line	30; kernel.c	return SUCCESS;
00296a   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
00296c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00296e   ffd9
002970   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  604 (0x025c) bytes ( 0.46%)
                                           ;           	  302 (0x012e) words
                                           ; udata size:	   34 (0x0022) bytes ( 2.66%)
                                           ; access size:	    5 (0x0005) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_kpRead
                                           	global	_kpDebounce
                                           	global	_kpInit
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           
                                           
                                           	idata
                                           _valor	db	0x00
                                           _kpDebounce_valorNovo_1_7	db	0x00
                                           _kpDebounce_valorAntigo_1_7	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           udata_keypad_0	udata
                                           _kpDebounce_tempo_1_7	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_keypad__kpInit	code
                                           _kpInit:
                                           ;	.line	59; keypad.c	void kpInit(void) {
0026ec   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0026ee   ffe5
0026f0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0026f2   ffd9
0026f4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0026f6   ffe5
                                           ;	.line	60; keypad.c	TRISB = 0xF0; //quatro entradas e quatro saidas
0026f8   ee0f     lfsr    0x0, 0xf93       	LFSR	0x00, 0xf93
0026fa   f093
0026fc   0ef0     movlw   0xf0             	MOVLW	0xf0
0026fe   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	61; keypad.c	BitClr(INTCON2, 7); //liga pull up
002700   ee0f     lfsr    0x0, 0xff1       	LFSR	0x00, 0xff1
002702   f0f1
002704   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
002706   f000
002708   9e00     bcf     0x00, 0x7, 0x0   	BCF	r0x00, 7
00270a   ee0f     lfsr    0x0, 0xff1       	LFSR	0x00, 0xff1
00270c   f0f1
00270e   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
002710   ffef
                                           ;	.line	62; keypad.c	ADCON1 = 0b00001110; //apenas AN0 é analogico, a referencia é baseada na fonte
002712   ee0f     lfsr    0x0, 0xfc1       	LFSR	0x00, 0xfc1
002714   f0c1
002716   0e0e     movlw   0x0e             	MOVLW	0x0e
002718   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
00271a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00271c   f000
00271e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002720   ffd9
002722   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_keypad__kpDebounce	code
                                           _kpDebounce:
                                           ;	.line	29; keypad.c	void kpDebounce(void) {
00095e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000960   ffe5
000962   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000964   ffd9
000966   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000968   ffe5
00096a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00096c   ffe5
00096e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000970   ffe5
000972   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
000974   ffe5
000976   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
000978   ffe5
00097a   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
00097c   ffe5
00097e   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
000980   ffe5
000982   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
000984   ffe5
000986   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
000988   ffe5
00098a   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
00098c   ffe5
                                           ;	.line	35; keypad.c	for (i = 0; i < 4; i++) {
00098e   6a00     clrf    0x00, 0x0        	CLRF	r0x00
000990   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000992   6a02     clrf    0x02, 0x0        	CLRF	r0x02
                                           _00122_DS_:
                                           ;	.line	36; keypad.c	TRISB = ~((unsigned char)1<<i);
000994   0e01     movlw   0x01             	MOVLW	0x01
000996   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000998   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00099a   e005     bz      0x0009a6         	BZ	_00149_DS_
00099c   6ce8     negf    0xe8, 0x0        	NEGF	WREG
00099e   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00150_DS_:
0009a0   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
0009a2   0f01     addlw   0x01             	ADDLW	0x01
0009a4   e3fd     bnc     0x0009a0         	BNC	_00150_DS_
                                           _00149_DS_:
0009a6   1e03     comf    0x03, 0x1, 0x0   	COMF	r0x03, F
0009a8   ee0f     lfsr    0x0, 0xf93       	LFSR	0x00, 0xf93
0009aa   f093
0009ac   c003     movff   0x003, 0xfef     	MOVFF	r0x03, INDF0
0009ae   ffef
                                           ;	.line	37; keypad.c	PORTB = ~((unsigned char)1<<i);
0009b0   ee0f     lfsr    0x0, 0xf81       	LFSR	0x00, 0xf81
0009b2   f081
0009b4   c003     movff   0x003, 0xfef     	MOVFF	r0x03, INDF0
0009b6   ffef
                                           ;	.line	40; keypad.c	for (j = 0; j < 2; j++) {
0009b8   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           _00120_DS_:
                                           ;	.line	41; keypad.c	if (!BitTst(PORTB, j + 4)) {
0009ba   ee0f     lfsr    0x0, 0xf81       	LFSR	0x00, 0xf81
0009bc   f081
0009be   cfef     movff   0xfef, 0x004     	MOVFF	INDF0, r0x04
0009c0   f004
0009c2   c003     movff   0x003, 0x005     	MOVFF	r0x03, r0x05
0009c4   f005
0009c6   6a06     clrf    0x06, 0x0        	CLRF	r0x06
0009c8   0e04     movlw   0x04             	MOVLW	0x04
0009ca   2605     addwf   0x05, 0x1, 0x0   	ADDWF	r0x05, F
0009cc   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0009ce   2a06     incf    0x06, 0x1, 0x0   	INCF	r0x06, F
0009d0   0e01     movlw   0x01             	MOVLW	0x01
0009d2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0009d4   0e00     movlw   0x00             	MOVLW	0x00
0009d6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0009d8   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0009da   e00f     bz      0x0009fa         	BZ	_00151_DS_
0009dc   e607     bn      0x0009ec         	BN	_00154_DS_
0009de   6ce8     negf    0xe8, 0x0        	NEGF	WREG
0009e0   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00152_DS_:
0009e2   3607     rlcf    0x07, 0x1, 0x0   	RLCF	r0x07, F
0009e4   3608     rlcf    0x08, 0x1, 0x0   	RLCF	r0x08, F
0009e6   0f01     addlw   0x01             	ADDLW	0x01
0009e8   e3fc     bnc     0x0009e2         	BNC	_00152_DS_
0009ea   d007     bra     0x0009fa         	BRA	_00151_DS_
                                           _00154_DS_:
0009ec   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00153_DS_:
0009ee   be08     btfsc   0x08, 0x7, 0x0   	BTFSC	r0x08, 7
0009f0   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0009f2   3208     rrcf    0x08, 0x1, 0x0   	RRCF	r0x08, F
0009f4   3207     rrcf    0x07, 0x1, 0x0   	RRCF	r0x07, F
0009f6   0f01     addlw   0x01             	ADDLW	0x01
0009f8   e3fa     bnc     0x0009ee         	BNC	_00153_DS_
                                           _00151_DS_:
0009fa   6a09     clrf    0x09, 0x0        	CLRF	r0x09
0009fc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0009fe   1607     andwf   0x07, 0x1, 0x0   	ANDWF	r0x07, F
000a00   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000a02   1608     andwf   0x08, 0x1, 0x0   	ANDWF	r0x08, F
000a04   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000a06   1008     iorwf   0x08, 0x0, 0x0   	IORWF	r0x08, W
000a08   e110     bnz     0x000a2a         	BNZ	_00111_DS_
                                           ;	.line	42; keypad.c	BitSet(valorNovo, (i * 2) + j);
000a0a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000a0c   2402     addwf   0x02, 0x0, 0x0   	ADDWF	r0x02, W
000a0e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000a10   0e01     movlw   0x01             	MOVLW	0x01
000a12   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000a14   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000a16   e005     bz      0x000a22         	BZ	_00155_DS_
000a18   6ce8     negf    0xe8, 0x0        	NEGF	WREG
000a1a   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00156_DS_:
000a1c   3605     rlcf    0x05, 0x1, 0x0   	RLCF	r0x05, F
000a1e   0f01     addlw   0x01             	ADDLW	0x01
000a20   e3fd     bnc     0x000a1c         	BNC	_00156_DS_
                                           _00155_DS_:
000a22   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000a24   0100     movlb   0x0              	BANKSEL	_kpDebounce_valorNovo_1_7
000a26   139f     iorwf   0x9f, 0x1, 0x1   	IORWF	_kpDebounce_valorNovo_1_7, F, B
000a28   d011     bra     0x000a4c         	BRA	_00121_DS_
                                           _00111_DS_:
                                           ;	.line	44; keypad.c	BitClr(valorNovo, (i * 2) + j);
000a2a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000a2c   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
000a2e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000a30   0e01     movlw   0x01             	MOVLW	0x01
000a32   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000a34   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000a36   e005     bz      0x000a42         	BZ	_00158_DS_
000a38   6ce8     negf    0xe8, 0x0        	NEGF	WREG
000a3a   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00159_DS_:
000a3c   3605     rlcf    0x05, 0x1, 0x0   	RLCF	r0x05, F
000a3e   0f01     addlw   0x01             	ADDLW	0x01
000a40   e3fd     bnc     0x000a3c         	BNC	_00159_DS_
                                           _00158_DS_:
000a42   1c05     comf    0x05, 0x0, 0x0   	COMF	r0x05, W
000a44   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000a46   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000a48   0100     movlb   0x0              	BANKSEL	_kpDebounce_valorNovo_1_7
000a4a   179f     andwf   0x9f, 0x1, 0x1   	ANDWF	_kpDebounce_valorNovo_1_7, F, B
                                           _00121_DS_:
                                           ;	.line	40; keypad.c	for (j = 0; j < 2; j++) {
000a4c   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
000a4e   0e02     movlw   0x02             	MOVLW	0x02
000a50   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
000a52   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
000a54   d7b2     bra     0x0009ba         	BRA	_00120_DS_
                                           ;	.line	35; keypad.c	for (i = 0; i < 4; i++) {
000a56   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000a58   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000a5a   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
000a5c   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
000a5e   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000a60   0e04     movlw   0x04             	MOVLW	0x04
000a62   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
000a64   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
000a66   d796     bra     0x000994         	BRA	_00122_DS_
000a68   0100     movlb   0x0              	BANKSEL	_kpDebounce_valorAntigo_1_7
                                           ;	.line	48; keypad.c	if (valorAntigo == valorNovo) {
000a6a   51a0     movf    0xa0, 0x0, 0x1   	MOVF	_kpDebounce_valorAntigo_1_7, W, B
000a6c   0100     movlb   0x0              	BANKSEL	_kpDebounce_valorNovo_1_7
000a6e   199f     xorwf   0x9f, 0x0, 0x1   	XORWF	_kpDebounce_valorNovo_1_7, W, B
000a70   e103     bnz     0x000a78         	BNZ	_00116_DS_
                                           _00164_DS_:
000a72   0100     movlb   0x0              	BANKSEL	_kpDebounce_tempo_1_7
                                           ;	.line	49; keypad.c	tempo--;
000a74   07c4     decf    0xc4, 0x1, 0x1   	DECF	_kpDebounce_tempo_1_7, F, B
000a76   d005     bra     0x000a82         	BRA	_00117_DS_
                                           _00116_DS_:
                                           ;	.line	51; keypad.c	tempo = 10;
000a78   0e0a     movlw   0x0a             	MOVLW	0x0a
000a7a   0100     movlb   0x0              	BANKSEL	_kpDebounce_tempo_1_7
000a7c   6fc4     movwf   0xc4, 0x1        	MOVWF	_kpDebounce_tempo_1_7, B
                                           ;	.line	52; keypad.c	valorAntigo = valorNovo;
000a7e   c09f     movff   0x09f, 0x0a0     	MOVFF	_kpDebounce_valorNovo_1_7, _kpDebounce_valorAntigo_1_7
000a80   f0a0
                                           _00117_DS_:
000a82   0100     movlb   0x0              	BANKSEL	_kpDebounce_tempo_1_7
                                           ;	.line	54; keypad.c	if (tempo == 0) {
000a84   51c4     movf    0xc4, 0x0, 0x1   	MOVF	_kpDebounce_tempo_1_7, W, B
000a86   e102     bnz     0x000a8c         	BNZ	_00124_DS_
                                           ;	.line	55; keypad.c	valor = valorAntigo;
000a88   c0a0     movff   0x0a0, 0x09e     	MOVFF	_kpDebounce_valorAntigo_1_7, _valor
000a8a   f09e
                                           _00124_DS_:
000a8c   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
000a8e   f009
000a90   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
000a92   f008
000a94   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
000a96   f007
000a98   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
000a9a   f006
000a9c   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
000a9e   f005
000aa0   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
000aa2   f004
000aa4   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
000aa6   f003
000aa8   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000aaa   f002
000aac   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000aae   f001
000ab0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000ab2   f000
000ab4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000ab6   ffd9
000ab8   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_keypad__kpRead	code
                                           _kpRead:
                                           ;	.line	25; keypad.c	unsigned char kpRead(void) {
002a64   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a66   ffe5
002a68   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a6a   ffd9
002a6c   0100     movlb   0x0              	BANKSEL	_valor
                                           ;	.line	26; keypad.c	return valor;
002a6e   519e     movf    0x9e, 0x0, 0x1   	MOVF	_valor, W, B
002a70   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a72   ffd9
002a74   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  422 (0x01a6) bytes ( 0.32%)
                                           ;           	  211 (0x00d3) words
                                           ; udata size:	    1 (0x0001) bytes ( 0.08%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_lcdCommand
                                           	global	_lcdData
                                           	global	_lcdInt
                                           	global	_lcdString
                                           	global	_lcdInit
                                           	global	_Delay40us
                                           	global	_Delay2ms
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrget1
                                           	extern	__divsint
                                           	extern	__modsint
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_lcd__lcdInit	code
                                           _lcdInit:
                                           ;	.line	92; lcd.c	void lcdInit(void) {
0016ce   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0016d0   ffe5
0016d2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0016d4   ffd9
0016d6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0016d8   ffe5
                                           ;	.line	96; lcd.c	Delay2ms();
0016da   ecc9     call    0x002792, 0x0call    0x002792, 0x0 	CALL	_Delay2ms
0016dc   f013
                                           ;	.line	97; lcd.c	Delay2ms();
0016de   ecc9     call    0x002792, 0x0call    0x002792, 0x0 	CALL	_Delay2ms
0016e0   f013
                                           ;	.line	98; lcd.c	Delay2ms();
0016e2   ecc9     call    0x002792, 0x0call    0x002792, 0x0 	CALL	_Delay2ms
0016e4   f013
                                           ;	.line	99; lcd.c	Delay2ms();
0016e6   ecc9     call    0x002792, 0x0call    0x002792, 0x0 	CALL	_Delay2ms
0016e8   f013
                                           ;	.line	100; lcd.c	Delay2ms();
0016ea   ecc9     call    0x002792, 0x0call    0x002792, 0x0 	CALL	_Delay2ms
0016ec   f013
                                           ;	.line	101; lcd.c	Delay2ms();
0016ee   ecc9     call    0x002792, 0x0call    0x002792, 0x0 	CALL	_Delay2ms
0016f0   f013
                                           ;	.line	104; lcd.c	BitClr(TRISE, RS); //RS
0016f2   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
0016f4   f096
0016f6   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0016f8   f000
0016fa   9000     bcf     0x00, 0x0, 0x0   	BCF	r0x00, 0
0016fc   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
0016fe   f096
001700   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001702   ffef
                                           ;	.line	105; lcd.c	BitClr(TRISE, EN); //EN
001704   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
001706   f096
001708   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00170a   f000
00170c   9200     bcf     0x00, 0x1, 0x0   	BCF	r0x00, 1
00170e   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
001710   f096
001712   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001714   ffef
                                           ;	.line	106; lcd.c	BitClr(TRISE, RW); //RW
001716   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
001718   f096
00171a   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00171c   f000
00171e   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
001720   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
001722   f096
001724   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001726   ffef
                                           ;	.line	107; lcd.c	TRISD = 0x00; //dados
001728   ee0f     lfsr    0x0, 0xf95       	LFSR	0x00, 0xf95
00172a   f095
00172c   0e00     movlw   0x00             	MOVLW	0x00
00172e   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	108; lcd.c	ADCON1 = 0b00001110; //apenas
001730   ee0f     lfsr    0x0, 0xfc1       	LFSR	0x00, 0xfc1
001732   f0c1
001734   0e0e     movlw   0x0e             	MOVLW	0x0e
001736   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	111; lcd.c	lcdCommand(0x38); //0b0011 1000 8bits, 2 linhas, 5x8
001738   0e38     movlw   0x38             	MOVLW	0x38
00173a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00173c   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_lcdCommand
00173e   f00e
001740   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	112; lcd.c	lcdCommand(0x0F); //0b0000 1111 display e cursor on, com blink
001742   0e0f     movlw   0x0f             	MOVLW	0x0f
001744   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001746   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_lcdCommand
001748   f00e
00174a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	113; lcd.c	lcdCommand(0x06); //0b0000 0110 modo incremental
00174c   0e06     movlw   0x06             	MOVLW	0x06
00174e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001750   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_lcdCommand
001752   f00e
001754   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	114; lcd.c	lcdCommand(0x03); //0b0000 0011 zera variáveis internas
001756   0e03     movlw   0x03             	MOVLW	0x03
001758   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00175a   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_lcdCommand
00175c   f00e
00175e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	115; lcd.c	lcdCommand(0x01); //0b0000 0001 Limpa a tela
001760   0e01     movlw   0x01             	MOVLW	0x01
001762   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001764   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_lcdCommand
001766   f00e
001768   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00176a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00176c   f000
00176e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001770   ffd9
001772   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__lcdString	code
                                           _lcdString:
                                           ;	.line	84; lcd.c	void lcdString(char msg[]) {
00195c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00195e   ffe5
001960   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001962   ffd9
001964   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001966   ffe5
001968   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00196a   ffe5
00196c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00196e   ffe5
001970   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001972   ffe5
001974   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001976   ffe5
001978   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
00197a   ffe5
00197c   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
00197e   ffe5
001980   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001982   ffe5
001984   0e02     movlw   0x02             	MOVLW	0x02
001986   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001988   f000
00198a   0e03     movlw   0x03             	MOVLW	0x03
00198c   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00198e   f001
001990   0e04     movlw   0x04             	MOVLW	0x04
001992   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
001994   f002
                                           ;	.line	86; lcd.c	while (msg[i]!=0) {
001996   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001998   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00152_DS_:
00199a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00199c   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00199e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0019a0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0019a2   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0019a4   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0019a6   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0019a8   be04     btfsc   0x04, 0x7, 0x0   	BTFSC	r0x04, 7
0019aa   68e8     setf    0xe8, 0x0        	SETF	WREG
0019ac   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
0019ae   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0019b0   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0019b2   ffe9
0019b4   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0019b6   fff3
0019b8   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0019ba   ec98     call    0x002930, 0x0call    0x002930, 0x0 	CALL	__gptrget1
0019bc   f014
0019be   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0019c0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0019c2   e008     bz      0x0019d4         	BZ	_00155_DS_
                                           ;	.line	87; lcd.c	lcdData(msg[i]);
0019c4   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0019c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019c8   ecd8     call    0x001bb0, 0x0call    0x001bb0, 0x0 	CALL	_lcdData
0019ca   f00d
0019cc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	88; lcd.c	i++;
0019ce   4a03     infsnz  0x03, 0x1, 0x0   	INFSNZ	r0x03, F
0019d0   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
0019d2   d7e3     bra     0x00199a         	BRA	_00152_DS_
                                           _00155_DS_:
0019d4   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0019d6   f007
0019d8   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0019da   f006
0019dc   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0019de   f005
0019e0   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0019e2   f004
0019e4   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0019e6   f003
0019e8   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0019ea   f002
0019ec   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0019ee   f001
0019f0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0019f2   f000
0019f4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0019f6   ffd9
0019f8   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__lcdInt	code
                                           _lcdInt:
                                           ;	.line	71; lcd.c	void lcdInt(int val) {
0002ec   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0002ee   ffe5
0002f0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0002f2   ffd9
0002f4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0002f6   ffe5
0002f8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0002fa   ffe5
0002fc   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0002fe   ffe5
000300   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
000302   ffe5
000304   0e02     movlw   0x02             	MOVLW	0x02
000306   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000308   f000
00030a   0e03     movlw   0x03             	MOVLW	0x03
00030c   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00030e   f001
                                           ;	.line	72; lcd.c	if (val < 0) {
000310   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
000312   ae01     btfss   0x01, 0x7, 0x0   	BTFSS	r0x01, 7
000314   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000316   e309     bnc     0x00032a         	BNC	_00146_DS_
                                           ;	.line	73; lcd.c	val = val * (-1);
000318   1e01     comf    0x01, 0x1, 0x0   	COMF	r0x01, F
00031a   6c00     negf    0x00, 0x0        	NEGF	r0x00
00031c   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
00031e   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           ;	.line	74; lcd.c	lcdData('-');
000320   0e2d     movlw   0x2d             	MOVLW	0x2d
000322   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000324   ecd8     call    0x001bb0, 0x0call    0x001bb0, 0x0 	CALL	_lcdData
000326   f00d
000328   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00146_DS_:
                                           ;	.line	76; lcd.c	lcdData((val / 10000) % 10 + 48);
00032a   0e27     movlw   0x27             	MOVLW	0x27
00032c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00032e   0e10     movlw   0x10             	MOVLW	0x10
000330   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000332   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000334   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000336   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000338   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00033a   ec9e     call    0x000f3c, 0x0call    0x000f3c, 0x0 	CALL	__divsint
00033c   f007
00033e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000340   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
000342   f003
000344   0e04     movlw   0x04             	MOVLW	0x04
000346   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000348   0e00     movlw   0x00             	MOVLW	0x00
00034a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00034c   0e0a     movlw   0x0a             	MOVLW	0x0a
00034e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000350   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000352   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000354   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000356   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000358   ec15     call    0x00102a, 0x0call    0x00102a, 0x0 	CALL	__modsint
00035a   f008
00035c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00035e   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
000360   f003
000362   0e04     movlw   0x04             	MOVLW	0x04
000364   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000366   0e30     movlw   0x30             	MOVLW	0x30
000368   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
00036a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00036c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00036e   ecd8     call    0x001bb0, 0x0call    0x001bb0, 0x0 	CALL	_lcdData
000370   f00d
000372   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	77; lcd.c	lcdData((val / 1000) % 10 + 48);
000374   0e03     movlw   0x03             	MOVLW	0x03
000376   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000378   0ee8     movlw   0xe8             	MOVLW	0xe8
00037a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00037c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00037e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000380   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000382   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000384   ec9e     call    0x000f3c, 0x0call    0x000f3c, 0x0 	CALL	__divsint
000386   f007
000388   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00038a   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
00038c   f003
00038e   0e04     movlw   0x04             	MOVLW	0x04
000390   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000392   0e00     movlw   0x00             	MOVLW	0x00
000394   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000396   0e0a     movlw   0x0a             	MOVLW	0x0a
000398   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00039a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00039c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00039e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0003a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003a2   ec15     call    0x00102a, 0x0call    0x00102a, 0x0 	CALL	__modsint
0003a4   f008
0003a6   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0003a8   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
0003aa   f003
0003ac   0e04     movlw   0x04             	MOVLW	0x04
0003ae   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0003b0   0e30     movlw   0x30             	MOVLW	0x30
0003b2   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0003b4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0003b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003b8   ecd8     call    0x001bb0, 0x0call    0x001bb0, 0x0 	CALL	_lcdData
0003ba   f00d
0003bc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	78; lcd.c	lcdData((val / 100) % 10 + 48);
0003be   0e00     movlw   0x00             	MOVLW	0x00
0003c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003c2   0e64     movlw   0x64             	MOVLW	0x64
0003c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003c6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0003c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003ca   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0003cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003ce   ec9e     call    0x000f3c, 0x0call    0x000f3c, 0x0 	CALL	__divsint
0003d0   f007
0003d2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0003d4   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
0003d6   f003
0003d8   0e04     movlw   0x04             	MOVLW	0x04
0003da   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0003dc   0e00     movlw   0x00             	MOVLW	0x00
0003de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003e0   0e0a     movlw   0x0a             	MOVLW	0x0a
0003e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003e4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0003e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003e8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0003ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003ec   ec15     call    0x00102a, 0x0call    0x00102a, 0x0 	CALL	__modsint
0003ee   f008
0003f0   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0003f2   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
0003f4   f003
0003f6   0e04     movlw   0x04             	MOVLW	0x04
0003f8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0003fa   0e30     movlw   0x30             	MOVLW	0x30
0003fc   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0003fe   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000400   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000402   ecd8     call    0x001bb0, 0x0call    0x001bb0, 0x0 	CALL	_lcdData
000404   f00d
000406   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	79; lcd.c	lcdData((val / 10) % 10 + 48);
000408   0e00     movlw   0x00             	MOVLW	0x00
00040a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00040c   0e0a     movlw   0x0a             	MOVLW	0x0a
00040e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000410   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000412   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000414   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000416   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000418   ec9e     call    0x000f3c, 0x0call    0x000f3c, 0x0 	CALL	__divsint
00041a   f007
00041c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00041e   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
000420   f003
000422   0e04     movlw   0x04             	MOVLW	0x04
000424   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000426   0e00     movlw   0x00             	MOVLW	0x00
000428   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00042a   0e0a     movlw   0x0a             	MOVLW	0x0a
00042c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00042e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000430   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000432   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000434   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000436   ec15     call    0x00102a, 0x0call    0x00102a, 0x0 	CALL	__modsint
000438   f008
00043a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00043c   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
00043e   f003
000440   0e04     movlw   0x04             	MOVLW	0x04
000442   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000444   0e30     movlw   0x30             	MOVLW	0x30
000446   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
000448   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00044a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00044c   ecd8     call    0x001bb0, 0x0call    0x001bb0, 0x0 	CALL	_lcdData
00044e   f00d
000450   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	80; lcd.c	lcdData((val / 1) % 10 + 48);
000452   0e00     movlw   0x00             	MOVLW	0x00
000454   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000456   0e0a     movlw   0x0a             	MOVLW	0x0a
000458   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00045a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00045c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00045e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000460   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000462   ec15     call    0x00102a, 0x0call    0x00102a, 0x0 	CALL	__modsint
000464   f008
000466   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000468   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00046a   f001
00046c   0e04     movlw   0x04             	MOVLW	0x04
00046e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000470   0e30     movlw   0x30             	MOVLW	0x30
000472   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000474   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000476   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000478   ecd8     call    0x001bb0, 0x0call    0x001bb0, 0x0 	CALL	_lcdData
00047a   f00d
00047c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00047e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
000480   f003
000482   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000484   f002
000486   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000488   f001
00048a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00048c   f000
00048e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000490   ffd9
000492   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__lcdData	code
                                           _lcdData:
                                           ;	.line	56; lcd.c	void lcdData(unsigned char valor) {
001bb0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001bb2   ffe5
001bb4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001bb6   ffd9
001bb8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001bba   ffe5
001bbc   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001bbe   ffe5
001bc0   0e02     movlw   0x02             	MOVLW	0x02
001bc2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001bc4   f000
                                           ;	.line	57; lcd.c	BitSet(PORTE, RS); //dados
001bc6   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001bc8   f084
001bca   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001bcc   f001
001bce   8001     bsf     0x01, 0x0, 0x0   	BSF	r0x01, 0
001bd0   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001bd2   f084
001bd4   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
001bd6   ffef
                                           ;	.line	58; lcd.c	BitClr(PORTE, RW); // habilita escrita
001bd8   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001bda   f084
001bdc   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001bde   f001
001be0   9401     bcf     0x01, 0x2, 0x0   	BCF	r0x01, 2
001be2   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001be4   f084
001be6   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
001be8   ffef
                                           ;	.line	60; lcd.c	PORTD = valor;
001bea   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
001bec   f083
001bee   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001bf0   ffef
                                           ;	.line	62; lcd.c	BitSet(PORTE, EN); //Pulso no Enable
001bf2   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001bf4   f084
001bf6   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001bf8   f000
001bfa   8200     bsf     0x00, 0x1, 0x0   	BSF	r0x00, 1
001bfc   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001bfe   f084
001c00   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001c02   ffef
                                           ;	.line	63; lcd.c	BitClr(PORTE, EN);
001c04   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001c06   f084
001c08   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001c0a   f000
001c0c   9200     bcf     0x00, 0x1, 0x0   	BCF	r0x00, 1
001c0e   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001c10   f084
001c12   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001c14   ffef
                                           ;	.line	65; lcd.c	BitClr(PORTE, RS); //deixa em nivel baixo por causa do display de 7 seg
001c16   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001c18   f084
001c1a   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001c1c   f000
001c1e   9000     bcf     0x00, 0x0, 0x0   	BCF	r0x00, 0
001c20   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001c22   f084
001c24   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001c26   ffef
                                           ;	.line	66; lcd.c	Delay40us();
001c28   ecfa     call    0x0027f4, 0x0call    0x0027f4, 0x0 	CALL	_Delay40us
001c2a   f013
001c2c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001c2e   f001
001c30   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001c32   f000
001c34   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001c36   ffd9
001c38   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__lcdCommand	code
                                           _lcdCommand:
                                           ;	.line	40; lcd.c	void lcdCommand(unsigned char cmd) {
001cc2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001cc4   ffe5
001cc6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001cc8   ffd9
001cca   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001ccc   ffe5
001cce   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001cd0   ffe5
001cd2   0e02     movlw   0x02             	MOVLW	0x02
001cd4   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001cd6   f000
                                           ;	.line	41; lcd.c	BitClr(PORTE, RS); //comando
001cd8   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001cda   f084
001cdc   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001cde   f001
001ce0   9001     bcf     0x01, 0x0, 0x0   	BCF	r0x01, 0
001ce2   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001ce4   f084
001ce6   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
001ce8   ffef
                                           ;	.line	42; lcd.c	BitClr(PORTE, RW); // habilita escrita
001cea   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001cec   f084
001cee   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001cf0   f001
001cf2   9401     bcf     0x01, 0x2, 0x0   	BCF	r0x01, 2
001cf4   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001cf6   f084
001cf8   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
001cfa   ffef
                                           ;	.line	44; lcd.c	PORTD = cmd;
001cfc   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
001cfe   f083
001d00   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001d02   ffef
                                           ;	.line	46; lcd.c	BitSet(PORTE, EN); //Pulso no Enable
001d04   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001d06   f084
001d08   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001d0a   f001
001d0c   8201     bsf     0x01, 0x1, 0x0   	BSF	r0x01, 1
001d0e   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001d10   f084
001d12   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
001d14   ffef
                                           ;	.line	47; lcd.c	BitClr(PORTE, EN);
001d16   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001d18   f084
001d1a   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001d1c   f001
001d1e   9201     bcf     0x01, 0x1, 0x0   	BCF	r0x01, 1
001d20   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001d22   f084
001d24   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
001d26   ffef
                                           ;	.line	49; lcd.c	if (BitTst(cmd, 1)) { //o comando de reset exige mais tempo
001d28   a200     btfss   0x00, 0x1, 0x0   	BTFSS	r0x00, 1
001d2a   d003     bra     0x001d32         	BRA	_00124_DS_
                                           ;	.line	50; lcd.c	Delay2ms();
001d2c   ecc9     call    0x002792, 0x0call    0x002792, 0x0 	CALL	_Delay2ms
001d2e   f013
001d30   d002     bra     0x001d36         	BRA	_00126_DS_
                                           _00124_DS_:
                                           ;	.line	52; lcd.c	Delay40us();
001d32   ecfa     call    0x0027f4, 0x0call    0x0027f4, 0x0 	CALL	_Delay40us
001d34   f013
                                           _00126_DS_:
001d36   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001d38   f001
001d3a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001d3c   f000
001d3e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001d40   ffd9
001d42   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__Delay2ms	code
                                           _Delay2ms:
                                           ;	.line	33; lcd.c	void Delay2ms(void) {
002792   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002794   ffe5
002796   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002798   ffd9
00279a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00279c   ffe5
00279e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0027a0   ffe5
                                           ;	.line	35; lcd.c	for (i = 0; i < 50; i++) {
0027a2   0e32     movlw   0x32             	MOVLW	0x32
0027a4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00117_DS_:
                                           ;	.line	36; lcd.c	Delay40us();
0027a6   ecfa     call    0x0027f4, 0x0call    0x0027f4, 0x0 	CALL	_Delay40us
0027a8   f013
0027aa   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
0027ac   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0027ae   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
0027b0   f000
                                           ;	.line	35; lcd.c	for (i = 0; i < 50; i++) {
0027b2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0027b4   e1f8     bnz     0x0027a6         	BNZ	_00117_DS_
0027b6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0027b8   f001
0027ba   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0027bc   f000
0027be   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0027c0   ffd9
0027c2   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__Delay40us	code
                                           _Delay40us:
                                           ;	.line	28; lcd.c	void Delay40us(void) {
0027f4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0027f6   ffe5
0027f8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0027fa   ffd9
0027fc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0027fe   ffe5
002800   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002802   ffe5
                                           ;	.line	30; lcd.c	for (i = 0; i < 10; i++); //valor aproximado
002804   0e0a     movlw   0x0a             	MOVLW	0x0a
002806   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00108_DS_:
002808   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
00280a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00280c   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
00280e   f000
002810   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002812   e1fa     bnz     0x002808         	BNZ	_00108_DS_
002814   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002816   f001
002818   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00281a   f000
00281c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00281e   ffd9
002820   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1112 (0x0458) bytes ( 0.85%)
                                           ;           	  556 (0x022c) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    8 (0x0008) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_initLed
                                           	global	_ledON
                                           	global	_ledOFF
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_led__ledOFF	code
                                           _ledOFF:
                                           ;	.line	19; led.c	void ledOFF (int x){
001d44   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001d46   ffe5
001d48   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001d4a   ffd9
001d4c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001d4e   ffe5
001d50   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001d52   ffe5
001d54   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001d56   ffe5
001d58   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001d5a   ffe5
001d5c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001d5e   ffe5
001d60   0e02     movlw   0x02             	MOVLW	0x02
001d62   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001d64   f000
001d66   0e03     movlw   0x03             	MOVLW	0x03
001d68   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001d6a   f001
                                           ;	.line	20; led.c	BitClr(PORTD,x);
001d6c   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
001d6e   f083
001d70   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001d72   f002
001d74   0e01     movlw   0x01             	MOVLW	0x01
001d76   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001d78   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001d7a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001d7c   e00d     bz      0x001d98         	BZ	_00122_DS_
001d7e   e607     bn      0x001d8e         	BN	_00125_DS_
001d80   6ce8     negf    0xe8, 0x0        	NEGF	WREG
001d82   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00123_DS_:
001d84   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
001d86   3604     rlcf    0x04, 0x1, 0x0   	RLCF	r0x04, F
001d88   0f01     addlw   0x01             	ADDLW	0x01
001d8a   e3fc     bnc     0x001d84         	BNC	_00123_DS_
001d8c   d005     bra     0x001d98         	BRA	_00122_DS_
                                           _00125_DS_:
001d8e   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00124_DS_:
001d90   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
001d92   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
001d94   0f01     addlw   0x01             	ADDLW	0x01
001d96   e3fc     bnc     0x001d90         	BNC	_00124_DS_
                                           _00122_DS_:
001d98   1c03     comf    0x03, 0x0, 0x0   	COMF	r0x03, W
001d9a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001d9c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001d9e   1602     andwf   0x02, 0x1, 0x0   	ANDWF	r0x02, F
001da0   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
001da2   f083
001da4   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001da6   ffef
001da8   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001daa   f004
001dac   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001dae   f003
001db0   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001db2   f002
001db4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001db6   f001
001db8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001dba   f000
001dbc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001dbe   ffd9
001dc0   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_led__ledON	code
                                           _ledON:
                                           ;	.line	14; led.c	void ledON (int x){
001dc2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001dc4   ffe5
001dc6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001dc8   ffd9
001dca   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001dcc   ffe5
001dce   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001dd0   ffe5
001dd2   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001dd4   ffe5
001dd6   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001dd8   ffe5
001dda   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001ddc   ffe5
001dde   0e02     movlw   0x02             	MOVLW	0x02
001de0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001de2   f000
001de4   0e03     movlw   0x03             	MOVLW	0x03
001de6   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001de8   f001
                                           ;	.line	15; led.c	BitSet(PORTD,x);
001dea   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
001dec   f083
001dee   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001df0   f002
001df2   0e01     movlw   0x01             	MOVLW	0x01
001df4   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001df6   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001df8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001dfa   e00d     bz      0x001e16         	BZ	_00112_DS_
001dfc   e607     bn      0x001e0c         	BN	_00115_DS_
001dfe   6ce8     negf    0xe8, 0x0        	NEGF	WREG
001e00   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00113_DS_:
001e02   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
001e04   3604     rlcf    0x04, 0x1, 0x0   	RLCF	r0x04, F
001e06   0f01     addlw   0x01             	ADDLW	0x01
001e08   e3fc     bnc     0x001e02         	BNC	_00113_DS_
001e0a   d005     bra     0x001e16         	BRA	_00112_DS_
                                           _00115_DS_:
001e0c   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00114_DS_:
001e0e   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
001e10   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
001e12   0f01     addlw   0x01             	ADDLW	0x01
001e14   e3fc     bnc     0x001e0e         	BNC	_00114_DS_
                                           _00112_DS_:
001e16   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001e18   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001e1a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001e1c   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
001e1e   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
001e20   f083
001e22   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001e24   ffef
001e26   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001e28   f004
001e2a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001e2c   f003
001e2e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001e30   f002
001e32   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001e34   f001
001e36   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001e38   f000
001e3a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001e3c   ffd9
001e3e   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_led__initLed	code
                                           _initLed:
                                           ;	.line	9; led.c	void initLed (void){
002972   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002974   ffe5
002976   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002978   ffd9
                                           ;	.line	10; led.c	TRISD = 0x00;
00297a   ee0f     lfsr    0x0, 0xf95       	LFSR	0x00, 0xf95
00297c   f095
00297e   0e00     movlw   0x00             	MOVLW	0x00
002980   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	11; led.c	PORTD = 0xFF;
002982   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
002984   f083
002986   0eff     movlw   0xff             	MOVLW	0xff
002988   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
00298a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00298c   ffd9
00298e   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  282 (0x011a) bytes ( 0.22%)
                                           ;           	  141 (0x008d) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    5 (0x0005) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           	CONFIG	MCLRE=ON
                                           	CONFIG	OSC=HS
                                           	CONFIG	WDT=OFF
                                           	CONFIG	LVP=OFF
                                           	CONFIG	DEBUG=OFF
                                           	CONFIG	WDTPS=1
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_timerWait
                                           	extern	_timerReset
                                           	extern	_timerInit
                                           	extern	_lcdInit
                                           	extern	_kpDebounce
                                           	extern	_kpInit
                                           	extern	_eventInit
                                           	extern	_varInit
                                           	extern	_getTime
                                           	extern	_smLoop
                                           	extern	_outputInit
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	18; main.c	kpInit();
00266a   ec76     call    0x0026ec, 0x0call    0x0026ec, 0x0 	CALL	_kpInit
00266c   f013
                                           ;	.line	19; main.c	lcdInit();
00266e   ec67     call    0x0016ce, 0x0call    0x0016ce, 0x0 	CALL	_lcdInit
002670   f00b
                                           ;	.line	20; main.c	timerInit();
002672   ece2     call    0x0027c4, 0x0call    0x0027c4, 0x0 	CALL	_timerInit
002674   f013
                                           ;	.line	21; main.c	varInit();
002676   ec3b     call    0x002876, 0x0call    0x002876, 0x0 	CALL	_varInit
002678   f014
                                           ;	.line	22; main.c	eventInit();
00267a   ece2     call    0x0029c4, 0x0call    0x0029c4, 0x0 	CALL	_eventInit
00267c   f014
                                           ;	.line	23; main.c	outputInit();
00267e   ec0d     call    0x00181a, 0x0call    0x00181a, 0x0 	CALL	_outputInit
002680   f00c
                                           _00106_DS_:
                                           ;	.line	27; main.c	timerReset(getTime());
002682   ec1d     call    0x002a3a, 0x0call    0x002a3a, 0x0 	CALL	_getTime
002684   f015
002686   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002688   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00268a   f001
00268c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00268e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002690   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002692   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002694   ece8     call    0x0011d0, 0x0call    0x0011d0, 0x0 	CALL	_timerReset
002696   f008
002698   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00269a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	31; main.c	kpDebounce();
00269c   ecaf     call    0x00095e, 0x0call    0x00095e, 0x0 	CALL	_kpDebounce
00269e   f004
                                           ;	.line	34; main.c	smLoop();
0026a0   ece6     call    0x0007cc, 0x0call    0x0007cc, 0x0 	CALL	_smLoop
0026a2   f003
                                           ;	.line	36; main.c	timerWait();
0026a4   ec87     call    0x00290e, 0x0call    0x00290e, 0x0 	CALL	_timerWait
0026a6   f014
0026a8   d7ec     bra     0x002682         	BRA	_00106_DS_
0026aa   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   66 (0x0042) bytes ( 0.05%)
                                           ;           	   33 (0x0021) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    2 (0x0002) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_pwmSet1
                                           	global	_pwmSet2
                                           	global	_pwmFrequency
                                           	global	_pwmInit
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__mulint
                                           	extern	__divuint
                                           	extern	__divslong
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_pwm__pwmInit	code
                                           _pwmInit:
                                           ;	.line	56; pwm.c	void pwmInit(void) {
001c3a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001c3c   ffe5
001c3e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001c40   ffd9
001c42   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001c44   ffe5
                                           ;	.line	57; pwm.c	BitClr(TRISC, 1); //configura os pinos correspondentes como saídas
001c46   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001c48   f094
001c4a   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001c4c   f000
001c4e   9200     bcf     0x00, 0x1, 0x0   	BCF	r0x00, 1
001c50   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001c52   f094
001c54   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001c56   ffef
                                           ;	.line	58; pwm.c	BitClr(TRISC, 2);
001c58   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001c5a   f094
001c5c   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001c5e   f000
001c60   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
001c62   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001c64   f094
001c66   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001c68   ffef
                                           ;	.line	60; pwm.c	T2CON |= 0b00000011; //configura o prescale do timer 2 para 1:16
001c6a   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
001c6c   f0ca
001c6e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001c70   f000
001c72   0e03     movlw   0x03             	MOVLW	0x03
001c74   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
001c76   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
001c78   f0ca
001c7a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001c7c   ffef
                                           ;	.line	61; pwm.c	BitSet(T2CON, 2); //Liga o timer 2
001c7e   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
001c80   f0ca
001c82   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001c84   f000
001c86   8400     bsf     0x00, 0x2, 0x0   	BSF	r0x00, 2
001c88   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
001c8a   f0ca
001c8c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001c8e   ffef
                                           ;	.line	64; pwm.c	CCP1CON |= 0b00001100; //configura CCP1 como um PWM
001c90   ee0f     lfsr    0x0, 0xfbd       	LFSR	0x00, 0xfbd
001c92   f0bd
001c94   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001c96   f000
001c98   0e0c     movlw   0x0c             	MOVLW	0x0c
001c9a   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
001c9c   ee0f     lfsr    0x0, 0xfbd       	LFSR	0x00, 0xfbd
001c9e   f0bd
001ca0   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001ca2   ffef
                                           ;	.line	65; pwm.c	CCP2CON |= 0b00001100; //configura CCP2 como um PWM
001ca4   ee0f     lfsr    0x0, 0xfba       	LFSR	0x00, 0xfba
001ca6   f0ba
001ca8   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001caa   f000
001cac   0e0c     movlw   0x0c             	MOVLW	0x0c
001cae   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
001cb0   ee0f     lfsr    0x0, 0xfba       	LFSR	0x00, 0xfba
001cb2   f0ba
001cb4   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001cb6   ffef
001cb8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001cba   f000
001cbc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001cbe   ffd9
001cc0   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pwm__pwmFrequency	code
                                           _pwmFrequency:
                                           ;	.line	50; pwm.c	void pwmFrequency(unsigned int freq) {
001e40   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001e42   ffe5
001e44   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001e46   ffd9
001e48   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001e4a   ffe5
001e4c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001e4e   ffe5
001e50   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001e52   ffe5
001e54   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001e56   ffe5
001e58   0e02     movlw   0x02             	MOVLW	0x02
001e5a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001e5c   f000
001e5e   0e03     movlw   0x03             	MOVLW	0x03
001e60   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001e62   f001
                                           ;	.line	53; pwm.c	PR2 = (125000 / (freq)) - 1;
001e64   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001e66   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001e68   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001e6a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e6c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001e6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e70   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001e72   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e74   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001e76   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e78   0e00     movlw   0x00             	MOVLW	0x00
001e7a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e7c   0e01     movlw   0x01             	MOVLW	0x01
001e7e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e80   0ee8     movlw   0xe8             	MOVLW	0xe8
001e82   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e84   0e48     movlw   0x48             	MOVLW	0x48
001e86   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e88   ec4a     call    0x000494, 0x0call    0x000494, 0x0 	CALL	__divslong
001e8a   f002
001e8c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001e8e   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001e90   f001
001e92   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001e94   f002
001e96   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001e98   f003
001e9a   0e08     movlw   0x08             	MOVLW	0x08
001e9c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001e9e   0600     decf    0x00, 0x1, 0x0   	DECF	r0x00, F
001ea0   ee0f     lfsr    0x0, 0xfcb       	LFSR	0x00, 0xfcb
001ea2   f0cb
001ea4   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001ea6   ffef
001ea8   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001eaa   f003
001eac   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001eae   f002
001eb0   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001eb2   f001
001eb4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001eb6   f000
001eb8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001eba   ffd9
001ebc   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pwm__pwmSet2	code
                                           _pwmSet2:
                                           ;	.line	39; pwm.c	void pwmSet2(unsigned char porcento) {
001290   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001292   ffe5
001294   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001296   ffd9
001298   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00129a   ffe5
00129c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00129e   ffe5
0012a0   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0012a2   ffe5
0012a4   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0012a6   ffe5
0012a8   0e02     movlw   0x02             	MOVLW	0x02
0012aa   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0012ac   f000
                                           ;	.line	40; pwm.c	unsigned int val = ((unsigned int) porcento) *(PR2 + 1);
0012ae   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0012b0   ee0f     lfsr    0x0, 0xfcb       	LFSR	0x00, 0xfcb
0012b2   f0cb
0012b4   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0012b6   f002
0012b8   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0012ba   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
0012bc   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
0012be   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0012c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012c2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0012c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012c6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0012c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ca   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0012cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ce   ec5e     call    0x0018bc, 0x0call    0x0018bc, 0x0 	CALL	__mulint
0012d0   f00c
0012d2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0012d4   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0012d6   f001
0012d8   0e04     movlw   0x04             	MOVLW	0x04
0012da   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	41; pwm.c	val /= 25;
0012dc   0e00     movlw   0x00             	MOVLW	0x00
0012de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012e0   0e19     movlw   0x19             	MOVLW	0x19
0012e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012e4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0012e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012e8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0012ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ec   ecb9     call    0x001572, 0x0call    0x001572, 0x0 	CALL	__divuint
0012ee   f00a
0012f0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0012f2   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0012f4   f001
0012f6   0e04     movlw   0x04             	MOVLW	0x04
0012f8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	43; pwm.c	val &= 0x03ff;
0012fa   0e03     movlw   0x03             	MOVLW	0x03
0012fc   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ;	.line	45; pwm.c	CCPR2L = val >> 2;
0012fe   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001300   3001     rrcf    0x01, 0x0, 0x0   	RRCF	r0x01, W
001302   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001304   3000     rrcf    0x00, 0x0, 0x0   	RRCF	r0x00, W
001306   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001308   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00130a   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
00130c   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
00130e   ee0f     lfsr    0x0, 0xfbb       	LFSR	0x00, 0xfbb
001310   f0bb
001312   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001314   ffef
                                           ;	.line	47; pwm.c	CCP2CON |= (val & 0x0003) << 4;
001316   ee0f     lfsr    0x0, 0xfba       	LFSR	0x00, 0xfba
001318   f0ba
00131a   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
00131c   f002
00131e   0e03     movlw   0x03             	MOVLW	0x03
001320   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
001322   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001324   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001326   0bf0     andlw   0xf0             	ANDLW	0xf0
001328   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00132a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00132c   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
00132e   ee0f     lfsr    0x0, 0xfba       	LFSR	0x00, 0xfba
001330   f0ba
001332   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001334   ffef
001336   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001338   f003
00133a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00133c   f002
00133e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001340   f001
001342   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001344   f000
001346   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001348   ffd9
00134a   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pwm__pwmSet1	code
                                           _pwmSet1:
                                           ;	.line	23; pwm.c	void pwmSet1(unsigned char porcento) {
00134c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00134e   ffe5
001350   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001352   ffd9
001354   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001356   ffe5
001358   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00135a   ffe5
00135c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00135e   ffe5
001360   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001362   ffe5
001364   0e02     movlw   0x02             	MOVLW	0x02
001366   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001368   f000
                                           ;	.line	29; pwm.c	unsigned int val = ((unsigned int) porcento) *(PR2 + 1);
00136a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00136c   ee0f     lfsr    0x0, 0xfcb       	LFSR	0x00, 0xfcb
00136e   f0cb
001370   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001372   f002
001374   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001376   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
001378   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
00137a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00137c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00137e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001380   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001382   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001384   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001386   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001388   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00138a   ec5e     call    0x0018bc, 0x0call    0x0018bc, 0x0 	CALL	__mulint
00138c   f00c
00138e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001390   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001392   f001
001394   0e04     movlw   0x04             	MOVLW	0x04
001396   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	30; pwm.c	val = val / 25;
001398   0e00     movlw   0x00             	MOVLW	0x00
00139a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00139c   0e19     movlw   0x19             	MOVLW	0x19
00139e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013a0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0013a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013a4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0013a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013a8   ecb9     call    0x001572, 0x0call    0x001572, 0x0 	CALL	__divuint
0013aa   f00a
0013ac   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0013ae   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0013b0   f001
0013b2   0e04     movlw   0x04             	MOVLW	0x04
0013b4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	32; pwm.c	val &= 0x03ff;
0013b6   0e03     movlw   0x03             	MOVLW	0x03
0013b8   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ;	.line	34; pwm.c	CCPR1L = val >> 2;
0013ba   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0013bc   3001     rrcf    0x01, 0x0, 0x0   	RRCF	r0x01, W
0013be   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0013c0   3000     rrcf    0x00, 0x0, 0x0   	RRCF	r0x00, W
0013c2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0013c4   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0013c6   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
0013c8   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
0013ca   ee0f     lfsr    0x0, 0xfbe       	LFSR	0x00, 0xfbe
0013cc   f0be
0013ce   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0013d0   ffef
                                           ;	.line	36; pwm.c	CCP1CON |= (val & 0x0003) << 4;
0013d2   ee0f     lfsr    0x0, 0xfbd       	LFSR	0x00, 0xfbd
0013d4   f0bd
0013d6   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0013d8   f002
0013da   0e03     movlw   0x03             	MOVLW	0x03
0013dc   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0013de   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0013e0   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0013e2   0bf0     andlw   0xf0             	ANDLW	0xf0
0013e4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0013e6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0013e8   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
0013ea   ee0f     lfsr    0x0, 0xfbd       	LFSR	0x00, 0xfbd
0013ec   f0bd
0013ee   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0013f0   ffef
0013f2   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0013f4   f003
0013f6   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0013f8   f002
0013fa   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0013fc   f001
0013fe   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001400   f000
001402   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001404   ffd9
001406   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  638 (0x027e) bytes ( 0.49%)
                                           ;           	  319 (0x013f) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_rtcInit
                                           	global	_ht1380write
                                           	global	_ht1380read
                                           	global	_rtcSetDateTime
                                           	global	_rtcGetSeconds
                                           	global	_rtcGetMinutes
                                           	global	_rtcGetHours
                                           	global	_rtcGetDate
                                           	global	_rtcGetMonth
                                           	global	_rtcGetYear
                                           	global	_rtcGetDay
                                           	global	_rtcPutSeconds
                                           	global	_rtcPutMinutes
                                           	global	_rtcPutHours
                                           	global	_rtcPutDate
                                           	global	_rtcPutMonth
                                           	global	_rtcPutDay
                                           	global	_rtcPutYear
                                           	global	_de
                                           	global	_rtcStart
                                           	global	_writeByte
                                           	global	_readByte
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__moduchar
                                           	extern	__divuchar
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_rtc_0	udata
                                           _de	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_rtc__rtcPutYear	code
                                           _rtcPutYear:
                                           ;	.line	228; rtc.c	void rtcPutYear(unsigned char year) {
00208a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00208c   ffe5
00208e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002090   ffd9
002092   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002094   ffe5
002096   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002098   ffe5
00209a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00209c   ffe5
00209e   0e02     movlw   0x02             	MOVLW	0x02
0020a0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0020a2   f000
                                           ;	.line	229; rtc.c	ht1380write(6, (year % 10) | ((year / 10) << 4));
0020a4   0e0a     movlw   0x0a             	MOVLW	0x0a
0020a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020a8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0020aa   ffe5
0020ac   ecd4     call    0x001fa8, 0x0call    0x001fa8, 0x0 	CALL	__moduchar
0020ae   f00f
0020b0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0020b2   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0020b4   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0020b6   0e0a     movlw   0x0a             	MOVLW	0x0a
0020b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020ba   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0020bc   ffe5
0020be   ec5f     call    0x001ebe, 0x0call    0x001ebe, 0x0 	CALL	__divuchar
0020c0   f00f
0020c2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0020c4   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0020c6   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0020c8   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0020ca   0bf0     andlw   0xf0             	ANDLW	0xf0
0020cc   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0020ce   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0020d0   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0020d2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0020d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020d6   0e06     movlw   0x06             	MOVLW	0x06
0020d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020da   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
0020dc   f008
0020de   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0020e0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0020e2   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0020e4   f002
0020e6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0020e8   f001
0020ea   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0020ec   f000
0020ee   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0020f0   ffd9
0020f2   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcPutDay	code
                                           _rtcPutDay:
                                           ;	.line	224; rtc.c	void rtcPutDay(unsigned char day) {
002822   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002824   ffe5
002826   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002828   ffd9
00282a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00282c   ffe5
00282e   0e02     movlw   0x02             	MOVLW	0x02
002830   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002832   f000
                                           ;	.line	225; rtc.c	ht1380write(5, day);
002834   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002836   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002838   0e05     movlw   0x05             	MOVLW	0x05
00283a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00283c   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
00283e   f008
002840   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002842   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002844   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002846   f000
002848   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00284a   ffd9
00284c   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcPutMonth	code
                                           _rtcPutMonth:
                                           ;	.line	220; rtc.c	void rtcPutMonth(unsigned char month) {
0020f4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0020f6   ffe5
0020f8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0020fa   ffd9
0020fc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0020fe   ffe5
002100   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002102   ffe5
002104   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002106   ffe5
002108   0e02     movlw   0x02             	MOVLW	0x02
00210a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00210c   f000
                                           ;	.line	221; rtc.c	ht1380write(4, (month % 10) | ((month / 10) << 4));
00210e   0e0a     movlw   0x0a             	MOVLW	0x0a
002110   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002112   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002114   ffe5
002116   ecd4     call    0x001fa8, 0x0call    0x001fa8, 0x0 	CALL	__moduchar
002118   f00f
00211a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00211c   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00211e   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002120   0e0a     movlw   0x0a             	MOVLW	0x0a
002122   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002124   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002126   ffe5
002128   ec5f     call    0x001ebe, 0x0call    0x001ebe, 0x0 	CALL	__divuchar
00212a   f00f
00212c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00212e   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002130   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002132   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
002134   0bf0     andlw   0xf0             	ANDLW	0xf0
002136   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002138   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00213a   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
00213c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00213e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002140   0e04     movlw   0x04             	MOVLW	0x04
002142   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002144   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
002146   f008
002148   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00214a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00214c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00214e   f002
002150   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002152   f001
002154   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002156   f000
002158   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00215a   ffd9
00215c   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcPutDate	code
                                           _rtcPutDate:
                                           ;	.line	216; rtc.c	void rtcPutDate(unsigned char date) {
00215e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002160   ffe5
002162   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002164   ffd9
002166   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002168   ffe5
00216a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00216c   ffe5
00216e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002170   ffe5
002172   0e02     movlw   0x02             	MOVLW	0x02
002174   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002176   f000
                                           ;	.line	217; rtc.c	ht1380write(3, (date % 10) | ((date / 10) << 4));
002178   0e0a     movlw   0x0a             	MOVLW	0x0a
00217a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00217c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00217e   ffe5
002180   ecd4     call    0x001fa8, 0x0call    0x001fa8, 0x0 	CALL	__moduchar
002182   f00f
002184   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002186   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002188   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00218a   0e0a     movlw   0x0a             	MOVLW	0x0a
00218c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00218e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002190   ffe5
002192   ec5f     call    0x001ebe, 0x0call    0x001ebe, 0x0 	CALL	__divuchar
002194   f00f
002196   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002198   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00219a   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00219c   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
00219e   0bf0     andlw   0xf0             	ANDLW	0xf0
0021a0   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0021a2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0021a4   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0021a6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0021a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021aa   0e03     movlw   0x03             	MOVLW	0x03
0021ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021ae   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
0021b0   f008
0021b2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0021b4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0021b6   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0021b8   f002
0021ba   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0021bc   f001
0021be   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0021c0   f000
0021c2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0021c4   ffd9
0021c6   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcPutHours	code
                                           _rtcPutHours:
                                           ;	.line	212; rtc.c	void rtcPutHours(unsigned char hours) {
0021c8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0021ca   ffe5
0021cc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0021ce   ffd9
0021d0   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0021d2   ffe5
0021d4   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0021d6   ffe5
0021d8   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0021da   ffe5
0021dc   0e02     movlw   0x02             	MOVLW	0x02
0021de   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0021e0   f000
                                           ;	.line	213; rtc.c	ht1380write(2, (hours % 10) | ((hours / 10) << 4));
0021e2   0e0a     movlw   0x0a             	MOVLW	0x0a
0021e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021e6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0021e8   ffe5
0021ea   ecd4     call    0x001fa8, 0x0call    0x001fa8, 0x0 	CALL	__moduchar
0021ec   f00f
0021ee   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0021f0   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0021f2   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0021f4   0e0a     movlw   0x0a             	MOVLW	0x0a
0021f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021f8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0021fa   ffe5
0021fc   ec5f     call    0x001ebe, 0x0call    0x001ebe, 0x0 	CALL	__divuchar
0021fe   f00f
002200   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002202   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002204   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002206   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
002208   0bf0     andlw   0xf0             	ANDLW	0xf0
00220a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00220c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00220e   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
002210   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002212   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002214   0e02     movlw   0x02             	MOVLW	0x02
002216   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002218   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
00221a   f008
00221c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00221e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002220   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002222   f002
002224   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002226   f001
002228   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00222a   f000
00222c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00222e   ffd9
002230   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcPutMinutes	code
                                           _rtcPutMinutes:
                                           ;	.line	208; rtc.c	void rtcPutMinutes(unsigned char minutes) {
002232   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002234   ffe5
002236   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002238   ffd9
00223a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00223c   ffe5
00223e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002240   ffe5
002242   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002244   ffe5
002246   0e02     movlw   0x02             	MOVLW	0x02
002248   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00224a   f000
                                           ;	.line	209; rtc.c	ht1380write(1, (minutes % 10) | ((minutes / 10) << 4));
00224c   0e0a     movlw   0x0a             	MOVLW	0x0a
00224e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002250   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002252   ffe5
002254   ecd4     call    0x001fa8, 0x0call    0x001fa8, 0x0 	CALL	__moduchar
002256   f00f
002258   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00225a   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00225c   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00225e   0e0a     movlw   0x0a             	MOVLW	0x0a
002260   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002262   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002264   ffe5
002266   ec5f     call    0x001ebe, 0x0call    0x001ebe, 0x0 	CALL	__divuchar
002268   f00f
00226a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00226c   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00226e   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002270   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
002272   0bf0     andlw   0xf0             	ANDLW	0xf0
002274   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002276   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002278   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
00227a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00227c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00227e   0e01     movlw   0x01             	MOVLW	0x01
002280   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002282   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
002284   f008
002286   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002288   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00228a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00228c   f002
00228e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002290   f001
002292   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002294   f000
002296   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002298   ffd9
00229a   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcPutSeconds	code
                                           _rtcPutSeconds:
                                           ;	.line	204; rtc.c	void rtcPutSeconds(unsigned char seconds) {
00229c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00229e   ffe5
0022a0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0022a2   ffd9
0022a4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0022a6   ffe5
0022a8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0022aa   ffe5
0022ac   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0022ae   ffe5
0022b0   0e02     movlw   0x02             	MOVLW	0x02
0022b2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0022b4   f000
                                           ;	.line	205; rtc.c	ht1380write(0, (seconds % 10) | ((seconds / 10) << 4));
0022b6   0e0a     movlw   0x0a             	MOVLW	0x0a
0022b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0022ba   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0022bc   ffe5
0022be   ecd4     call    0x001fa8, 0x0call    0x001fa8, 0x0 	CALL	__moduchar
0022c0   f00f
0022c2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0022c4   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0022c6   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0022c8   0e0a     movlw   0x0a             	MOVLW	0x0a
0022ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0022cc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0022ce   ffe5
0022d0   ec5f     call    0x001ebe, 0x0call    0x001ebe, 0x0 	CALL	__divuchar
0022d2   f00f
0022d4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0022d6   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0022d8   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0022da   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0022dc   0bf0     andlw   0xf0             	ANDLW	0xf0
0022de   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0022e0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0022e2   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0022e4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0022e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0022e8   0e00     movlw   0x00             	MOVLW	0x00
0022ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0022ec   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
0022ee   f008
0022f0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0022f2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0022f4   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0022f6   f002
0022f8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0022fa   f001
0022fc   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0022fe   f000
002300   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002302   ffd9
002304   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcGetDay	code
                                           _rtcGetDay:
                                           ;	.line	188; rtc.c	unsigned char rtcGetDay(void) {
00284e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002850   ffe5
002852   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002854   ffd9
002856   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002858   ffe5
                                           ;	.line	190; rtc.c	value = ht1380read(5);
00285a   0e05     movlw   0x05             	MOVLW	0x05
00285c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00285e   ecfd     call    0x000bfa, 0x0call    0x000bfa, 0x0 	CALL	_ht1380read
002860   f005
002862   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002864   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	191; rtc.c	return (value & 0x0f); // 1..7
002866   0e0f     movlw   0x0f             	MOVLW	0x0f
002868   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
00286a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00286c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00286e   f000
002870   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002872   ffd9
002874   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcGetYear	code
                                           _rtcGetYear:
                                           ;	.line	182; rtc.c	unsigned char rtcGetYear(void) {
0024c8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0024ca   ffe5
0024cc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0024ce   ffd9
0024d0   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0024d2   ffe5
0024d4   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0024d6   ffe5
                                           ;	.line	184; rtc.c	value = ht1380read(6);
0024d8   0e06     movlw   0x06             	MOVLW	0x06
0024da   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0024dc   ecfd     call    0x000bfa, 0x0call    0x000bfa, 0x0 	CALL	_ht1380read
0024de   f005
0024e0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0024e2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	185; rtc.c	return (((value >> 4)&0x0f)*10 + (value & 0x0f));
0024e4   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0024e6   0b0f     andlw   0x0f             	ANDLW	0x0f
0024e8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0024ea   0e0f     movlw   0x0f             	MOVLW	0x0f
0024ec   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
0024ee   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0024f0   0d0a     mullw   0x0a             	MULLW	0x0a
0024f2   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0024f4   f001
0024f6   0e0f     movlw   0x0f             	MOVLW	0x0f
0024f8   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0024fa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0024fc   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
0024fe   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002500   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002502   f001
002504   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002506   f000
002508   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00250a   ffd9
00250c   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcGetMonth	code
                                           _rtcGetMonth:
                                           ;	.line	176; rtc.c	unsigned char rtcGetMonth(void) {
002626   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002628   ffe5
00262a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00262c   ffd9
00262e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002630   ffe5
002632   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002634   ffe5
                                           ;	.line	178; rtc.c	value = ht1380read(4);
002636   0e04     movlw   0x04             	MOVLW	0x04
002638   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00263a   ecfd     call    0x000bfa, 0x0call    0x000bfa, 0x0 	CALL	_ht1380read
00263c   f005
00263e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002640   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	179; rtc.c	return (((value >> 4)&0x01)*10 + (value & 0x0f));
002642   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002644   0b10     andlw   0x10             	ANDLW	0x10
002646   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
002648   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
00264a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00264c   0d0a     mullw   0x0a             	MULLW	0x0a
00264e   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002650   f001
002652   0e0f     movlw   0x0f             	MOVLW	0x0f
002654   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
002656   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002658   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
00265a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00265c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00265e   f001
002660   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002662   f000
002664   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002666   ffd9
002668   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcGetDate	code
                                           _rtcGetDate:
                                           ;	.line	170; rtc.c	unsigned char rtcGetDate(void) {
00250e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002510   ffe5
002512   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002514   ffd9
002516   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002518   ffe5
00251a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00251c   ffe5
                                           ;	.line	172; rtc.c	value = ht1380read(3);
00251e   0e03     movlw   0x03             	MOVLW	0x03
002520   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002522   ecfd     call    0x000bfa, 0x0call    0x000bfa, 0x0 	CALL	_ht1380read
002524   f005
002526   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002528   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	173; rtc.c	return (((value >> 4)&0x03)*10 + (value & 0x0f));
00252a   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
00252c   0b0f     andlw   0x0f             	ANDLW	0x0f
00252e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002530   0e03     movlw   0x03             	MOVLW	0x03
002532   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
002534   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002536   0d0a     mullw   0x0a             	MULLW	0x0a
002538   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00253a   f001
00253c   0e0f     movlw   0x0f             	MOVLW	0x0f
00253e   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
002540   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002542   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
002544   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002546   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002548   f001
00254a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00254c   f000
00254e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002550   ffd9
002552   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcGetHours	code
                                           _rtcGetHours:
                                           ;	.line	164; rtc.c	unsigned char rtcGetHours(void) {
002554   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002556   ffe5
002558   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00255a   ffd9
00255c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00255e   ffe5
002560   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002562   ffe5
                                           ;	.line	166; rtc.c	value = ht1380read(2);
002564   0e02     movlw   0x02             	MOVLW	0x02
002566   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002568   ecfd     call    0x000bfa, 0x0call    0x000bfa, 0x0 	CALL	_ht1380read
00256a   f005
00256c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00256e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	167; rtc.c	return (((value >> 4)&0x03)*10 + (value & 0x0f));
002570   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
002572   0b0f     andlw   0x0f             	ANDLW	0x0f
002574   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002576   0e03     movlw   0x03             	MOVLW	0x03
002578   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
00257a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00257c   0d0a     mullw   0x0a             	MULLW	0x0a
00257e   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002580   f001
002582   0e0f     movlw   0x0f             	MOVLW	0x0f
002584   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
002586   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002588   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
00258a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00258c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00258e   f001
002590   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002592   f000
002594   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002596   ffd9
002598   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcGetMinutes	code
                                           _rtcGetMinutes:
                                           ;	.line	158; rtc.c	unsigned char rtcGetMinutes(void) {
00259a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00259c   ffe5
00259e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0025a0   ffd9
0025a2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0025a4   ffe5
0025a6   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0025a8   ffe5
                                           ;	.line	160; rtc.c	value = ht1380read(1);
0025aa   0e01     movlw   0x01             	MOVLW	0x01
0025ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025ae   ecfd     call    0x000bfa, 0x0call    0x000bfa, 0x0 	CALL	_ht1380read
0025b0   f005
0025b2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0025b4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	161; rtc.c	return (((value >> 4)&0x07)*10 + (value & 0x0f));
0025b6   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0025b8   0b0f     andlw   0x0f             	ANDLW	0x0f
0025ba   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0025bc   0e07     movlw   0x07             	MOVLW	0x07
0025be   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
0025c0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0025c2   0d0a     mullw   0x0a             	MULLW	0x0a
0025c4   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0025c6   f001
0025c8   0e0f     movlw   0x0f             	MOVLW	0x0f
0025ca   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0025cc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0025ce   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
0025d0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0025d2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0025d4   f001
0025d6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0025d8   f000
0025da   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0025dc   ffd9
0025de   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcGetSeconds	code
                                           _rtcGetSeconds:
                                           ;	.line	151; rtc.c	unsigned char rtcGetSeconds(void) {
0025e0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0025e2   ffe5
0025e4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0025e6   ffd9
0025e8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0025ea   ffe5
0025ec   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0025ee   ffe5
                                           ;	.line	153; rtc.c	value = ht1380read(0); // read seconds
0025f0   0e00     movlw   0x00             	MOVLW	0x00
0025f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025f4   ecfd     call    0x000bfa, 0x0call    0x000bfa, 0x0 	CALL	_ht1380read
0025f6   f005
0025f8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0025fa   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	154; rtc.c	return (((value >> 4)&0x07)*10 + (value & 0x0f));
0025fc   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0025fe   0b0f     andlw   0x0f             	ANDLW	0x0f
002600   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002602   0e07     movlw   0x07             	MOVLW	0x07
002604   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
002606   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002608   0d0a     mullw   0x0a             	MULLW	0x0a
00260a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00260c   f001
00260e   0e0f     movlw   0x0f             	MOVLW	0x0f
002610   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
002612   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002614   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
002616   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002618   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00261a   f001
00261c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00261e   f000
002620   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002622   ffd9
002624   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcSetDateTime	code
                                           _rtcSetDateTime:
                                           ;	.line	139; rtc.c	void rtcSetDateTime(void) {
001b22   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001b24   ffe5
001b26   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001b28   ffd9
                                           ;	.line	141; rtc.c	ht1380write(7, 0); //disable write protection
001b2a   0e00     movlw   0x00             	MOVLW	0x00
001b2c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b2e   0e07     movlw   0x07             	MOVLW	0x07
001b30   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b32   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
001b34   f008
001b36   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001b38   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	142; rtc.c	ht1380write(0, 0x0); //sec
001b3a   0e00     movlw   0x00             	MOVLW	0x00
001b3c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b3e   0e00     movlw   0x00             	MOVLW	0x00
001b40   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b42   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
001b44   f008
001b46   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001b48   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	143; rtc.c	ht1380write(1, 0x21); //min
001b4a   0e21     movlw   0x21             	MOVLW	0x21
001b4c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b4e   0e01     movlw   0x01             	MOVLW	0x01
001b50   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b52   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
001b54   f008
001b56   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001b58   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	144; rtc.c	ht1380write(2, 0x23); //hora
001b5a   0e23     movlw   0x23             	MOVLW	0x23
001b5c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b5e   0e02     movlw   0x02             	MOVLW	0x02
001b60   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b62   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
001b64   f008
001b66   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001b68   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	145; rtc.c	ht1380write(3, 0x28); //dia
001b6a   0e28     movlw   0x28             	MOVLW	0x28
001b6c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b6e   0e03     movlw   0x03             	MOVLW	0x03
001b70   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b72   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
001b74   f008
001b76   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001b78   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	146; rtc.c	ht1380write(4, 0x10); //mes
001b7a   0e10     movlw   0x10             	MOVLW	0x10
001b7c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b7e   0e04     movlw   0x04             	MOVLW	0x04
001b80   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b82   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
001b84   f008
001b86   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001b88   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	147; rtc.c	ht1380write(5, 0x6); //dia semana
001b8a   0e06     movlw   0x06             	MOVLW	0x06
001b8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b8e   0e05     movlw   0x05             	MOVLW	0x05
001b90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b92   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
001b94   f008
001b96   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001b98   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	148; rtc.c	ht1380write(6, 0x12); //ano
001b9a   0e12     movlw   0x12             	MOVLW	0x12
001b9c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b9e   0e06     movlw   0x06             	MOVLW	0x06
001ba0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ba2   ec83     call    0x001106, 0x0call    0x001106, 0x0 	CALL	_ht1380write
001ba4   f008
001ba6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001ba8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001baa   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001bac   ffd9
001bae   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__ht1380read	code
                                           _ht1380read:
                                           ;	.line	119; rtc.c	unsigned char ht1380read(unsigned char addr) {
000bfa   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000bfc   ffe5
000bfe   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000c00   ffd9
000c02   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000c04   ffe5
000c06   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000c08   ffe5
000c0a   0e02     movlw   0x02             	MOVLW	0x02
000c0c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000c0e   f000
                                           ;	.line	121; rtc.c	RESET_OFF();
000c10   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000c12   f082
000c14   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000c16   f001
000c18   9a01     bcf     0x01, 0x5, 0x0   	BCF	r0x01, 5
000c1a   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000c1c   f082
000c1e   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
000c20   ffef
                                           ;	.line	122; rtc.c	SCL_OFF();
000c22   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000c24   f082
000c26   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000c28   f001
000c2a   9601     bcf     0x01, 0x3, 0x0   	BCF	r0x01, 3
000c2c   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000c2e   f082
000c30   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
000c32   ffef
                                           ;	.line	123; rtc.c	SDA_OFF();
000c34   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000c36   f082
000c38   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000c3a   f001
000c3c   9801     bcf     0x01, 0x4, 0x0   	BCF	r0x01, 4
000c3e   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000c40   f082
000c42   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
000c44   ffef
                                           ;	.line	125; rtc.c	RESET_ON();
000c46   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000c48   f082
000c4a   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000c4c   f001
000c4e   8a01     bsf     0x01, 0x5, 0x0   	BSF	r0x01, 5
000c50   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000c52   f082
000c54   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
000c56   ffef
                                           ;	.line	126; rtc.c	addr <<= 1;   //corrige endere?o
000c58   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000c5a   3600     rlcf    0x00, 0x1, 0x0   	RLCF	r0x00, F
                                           ;	.line	127; rtc.c	addr |= 0x81; //liga bit de leitura e hab. clk
000c5c   0e81     movlw   0x81             	MOVLW	0x81
000c5e   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
                                           ;	.line	128; rtc.c	writeByte(addr);
000c60   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000c62   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c64   ec61     call    0x0014c2, 0x0call    0x0014c2, 0x0 	CALL	_writeByte
000c66   f00a
000c68   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	129; rtc.c	SDA_IN();
000c6a   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
000c6c   f094
000c6e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000c70   f000
000c72   8800     bsf     0x00, 0x4, 0x0   	BSF	r0x00, 4
000c74   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
000c76   f094
000c78   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000c7a   ffef
                                           ;	.line	130; rtc.c	DELAY();DELAY();DELAY();DELAY();
000c7c   0e64     movlw   0x64             	MOVLW	0x64
000c7e   0100     movlb   0x0              	BANKSEL	_de
000c80   6fc5     movwf   0xc5, 0x1        	MOVWF	_de, B
                                           _00217_DS_:
000c82   0100     movlb   0x0              	BANKSEL	_de
000c84   07c5     decf    0xc5, 0x1, 0x1   	DECF	_de, F, B
000c86   0100     movlb   0x0              	BANKSEL	_de
000c88   51c5     movf    0xc5, 0x0, 0x1   	MOVF	_de, W, B
000c8a   e1fb     bnz     0x000c82         	BNZ	_00217_DS_
000c8c   0e64     movlw   0x64             	MOVLW	0x64
000c8e   0100     movlb   0x0              	BANKSEL	_de
000c90   6fc5     movwf   0xc5, 0x1        	MOVWF	_de, B
                                           _00220_DS_:
000c92   0100     movlb   0x0              	BANKSEL	_de
000c94   07c5     decf    0xc5, 0x1, 0x1   	DECF	_de, F, B
000c96   0100     movlb   0x0              	BANKSEL	_de
000c98   51c5     movf    0xc5, 0x0, 0x1   	MOVF	_de, W, B
000c9a   e1fb     bnz     0x000c92         	BNZ	_00220_DS_
000c9c   0e64     movlw   0x64             	MOVLW	0x64
000c9e   0100     movlb   0x0              	BANKSEL	_de
000ca0   6fc5     movwf   0xc5, 0x1        	MOVWF	_de, B
                                           _00223_DS_:
000ca2   0100     movlb   0x0              	BANKSEL	_de
000ca4   07c5     decf    0xc5, 0x1, 0x1   	DECF	_de, F, B
000ca6   0100     movlb   0x0              	BANKSEL	_de
000ca8   51c5     movf    0xc5, 0x0, 0x1   	MOVF	_de, W, B
000caa   e1fb     bnz     0x000ca2         	BNZ	_00223_DS_
000cac   0e64     movlw   0x64             	MOVLW	0x64
000cae   0100     movlb   0x0              	BANKSEL	_de
000cb0   6fc5     movwf   0xc5, 0x1        	MOVWF	_de, B
                                           _00226_DS_:
000cb2   0100     movlb   0x0              	BANKSEL	_de
000cb4   07c5     decf    0xc5, 0x1, 0x1   	DECF	_de, F, B
000cb6   0100     movlb   0x0              	BANKSEL	_de
000cb8   51c5     movf    0xc5, 0x0, 0x1   	MOVF	_de, W, B
000cba   e1fb     bnz     0x000cb2         	BNZ	_00226_DS_
000cbc   0e64     movlw   0x64             	MOVLW	0x64
000cbe   0100     movlb   0x0              	BANKSEL	_de
000cc0   6fc5     movwf   0xc5, 0x1        	MOVWF	_de, B
                                           ;	.line	131; rtc.c	dados = readByte();
000cc2   ecfd     call    0x0019fa, 0x0call    0x0019fa, 0x0 	CALL	_readByte
000cc4   f00c
000cc6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	132; rtc.c	RESET_OFF();
000cc8   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000cca   f082
000ccc   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000cce   f001
000cd0   9a01     bcf     0x01, 0x5, 0x0   	BCF	r0x01, 5
000cd2   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000cd4   f082
000cd6   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
000cd8   ffef
                                           ;	.line	133; rtc.c	SCL_OFF();
000cda   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000cdc   f082
000cde   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000ce0   f001
000ce2   9601     bcf     0x01, 0x3, 0x0   	BCF	r0x01, 3
000ce4   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000ce6   f082
000ce8   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
000cea   ffef
                                           ;	.line	134; rtc.c	SDA_OFF();
000cec   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000cee   f082
000cf0   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000cf2   f001
000cf4   9801     bcf     0x01, 0x4, 0x0   	BCF	r0x01, 4
000cf6   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000cf8   f082
000cfa   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
000cfc   ffef
                                           ;	.line	135; rtc.c	SDA_OUT();
000cfe   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
000d00   f094
000d02   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000d04   f001
000d06   9801     bcf     0x01, 0x4, 0x0   	BCF	r0x01, 4
000d08   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
000d0a   f094
000d0c   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
000d0e   ffef
                                           ;	.line	136; rtc.c	return dados;
000d10   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000d12   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000d14   f001
000d16   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000d18   f000
000d1a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000d1c   ffd9
000d1e   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__ht1380write	code
                                           _ht1380write:
                                           ;	.line	102; rtc.c	void ht1380write(unsigned char addr, unsigned char dados) {
001106   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001108   ffe5
00110a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00110c   ffd9
00110e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001110   ffe5
001112   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001114   ffe5
001116   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001118   ffe5
00111a   0e02     movlw   0x02             	MOVLW	0x02
00111c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00111e   f000
001120   0e03     movlw   0x03             	MOVLW	0x03
001122   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001124   f001
                                           ;	.line	103; rtc.c	RESET_OFF();
001126   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001128   f082
00112a   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
00112c   f002
00112e   9a02     bcf     0x02, 0x5, 0x0   	BCF	r0x02, 5
001130   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001132   f082
001134   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001136   ffef
                                           ;	.line	104; rtc.c	SCL_OFF();
001138   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00113a   f082
00113c   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
00113e   f002
001140   9602     bcf     0x02, 0x3, 0x0   	BCF	r0x02, 3
001142   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001144   f082
001146   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001148   ffef
                                           ;	.line	105; rtc.c	SDA_OFF();
00114a   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00114c   f082
00114e   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001150   f002
001152   9802     bcf     0x02, 0x4, 0x0   	BCF	r0x02, 4
001154   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001156   f082
001158   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00115a   ffef
                                           ;	.line	108; rtc.c	RESET_ON();
00115c   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00115e   f082
001160   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001162   f002
001164   8a02     bsf     0x02, 0x5, 0x0   	BSF	r0x02, 5
001166   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001168   f082
00116a   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00116c   ffef
                                           ;	.line	110; rtc.c	addr <<= 1;   //corrige endere?o
00116e   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001170   3600     rlcf    0x00, 0x1, 0x0   	RLCF	r0x00, F
                                           ;	.line	111; rtc.c	addr |= 0x80; //habilita clock
001172   8e00     bsf     0x00, 0x7, 0x0   	BSF	r0x00, 7
                                           ;	.line	112; rtc.c	writeByte(addr);
001174   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001176   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001178   ec61     call    0x0014c2, 0x0call    0x0014c2, 0x0 	CALL	_writeByte
00117a   f00a
00117c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	113; rtc.c	writeByte(dados);
00117e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001180   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001182   ec61     call    0x0014c2, 0x0call    0x0014c2, 0x0 	CALL	_writeByte
001184   f00a
001186   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	114; rtc.c	RESET_OFF();
001188   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00118a   f082
00118c   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00118e   f000
001190   9a00     bcf     0x00, 0x5, 0x0   	BCF	r0x00, 5
001192   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001194   f082
001196   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001198   ffef
                                           ;	.line	115; rtc.c	SCL_OFF();
00119a   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00119c   f082
00119e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0011a0   f000
0011a2   9600     bcf     0x00, 0x3, 0x0   	BCF	r0x00, 3
0011a4   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0011a6   f082
0011a8   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0011aa   ffef
                                           ;	.line	116; rtc.c	SDA_OFF();
0011ac   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0011ae   f082
0011b0   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0011b2   f000
0011b4   9800     bcf     0x00, 0x4, 0x0   	BCF	r0x00, 4
0011b6   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0011b8   f082
0011ba   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0011bc   ffef
0011be   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0011c0   f002
0011c2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0011c4   f001
0011c6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0011c8   f000
0011ca   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0011cc   ffd9
0011ce   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__readByte	code
                                           _readByte:
                                           ;	.line	82; rtc.c	unsigned char readByte() {
0019fa   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0019fc   ffe5
0019fe   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001a00   ffd9
001a02   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001a04   ffe5
001a06   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001a08   ffe5
001a0a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001a0c   ffe5
                                           ;	.line	85; rtc.c	dados = 0;
001a0e   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ;	.line	86; rtc.c	for (i = 0; i < 8; i++) {
001a10   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00171_DS_:
                                           ;	.line	87; rtc.c	SCL_ON();
001a12   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001a14   f082
001a16   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001a18   f002
001a1a   8602     bsf     0x02, 0x3, 0x0   	BSF	r0x02, 3
001a1c   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001a1e   f082
001a20   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001a22   ffef
                                           ;	.line	88; rtc.c	DELAY();
001a24   0e64     movlw   0x64             	MOVLW	0x64
001a26   0100     movlb   0x0              	BANKSEL	_de
001a28   6fc5     movwf   0xc5, 0x1        	MOVWF	_de, B
                                           _00167_DS_:
001a2a   0100     movlb   0x0              	BANKSEL	_de
001a2c   07c5     decf    0xc5, 0x1, 0x1   	DECF	_de, F, B
001a2e   0100     movlb   0x0              	BANKSEL	_de
001a30   51c5     movf    0xc5, 0x0, 0x1   	MOVF	_de, W, B
001a32   e1fb     bnz     0x001a2a         	BNZ	_00167_DS_
001a34   0e64     movlw   0x64             	MOVLW	0x64
001a36   0100     movlb   0x0              	BANKSEL	_de
001a38   6fc5     movwf   0xc5, 0x1        	MOVWF	_de, B
                                           ;	.line	90; rtc.c	dados >>= 1;
001a3a   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001a3c   3200     rrcf    0x00, 0x1, 0x0   	RRCF	r0x00, F
                                           ;	.line	92; rtc.c	if (SDA()) {
001a3e   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001a40   f082
001a42   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001a44   f002
001a46   a802     btfss   0x02, 0x4, 0x0   	BTFSS	r0x02, 4
001a48   d001     bra     0x001a4c         	BRA	_00162_DS_
                                           ;	.line	93; rtc.c	dados |= 0x80;
001a4a   8e00     bsf     0x00, 0x7, 0x0   	BSF	r0x00, 7
                                           _00162_DS_:
                                           ;	.line	96; rtc.c	SCL_OFF();
001a4c   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001a4e   f082
001a50   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001a52   f002
001a54   9602     bcf     0x02, 0x3, 0x0   	BCF	r0x02, 3
001a56   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001a58   f082
001a5a   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001a5c   ffef
                                           ;	.line	97; rtc.c	DELAY();
001a5e   0e64     movlw   0x64             	MOVLW	0x64
001a60   0100     movlb   0x0              	BANKSEL	_de
001a62   6fc5     movwf   0xc5, 0x1        	MOVWF	_de, B
                                           _00170_DS_:
001a64   0100     movlb   0x0              	BANKSEL	_de
001a66   07c5     decf    0xc5, 0x1, 0x1   	DECF	_de, F, B
001a68   0100     movlb   0x0              	BANKSEL	_de
001a6a   51c5     movf    0xc5, 0x0, 0x1   	MOVF	_de, W, B
001a6c   e1fb     bnz     0x001a64         	BNZ	_00170_DS_
001a6e   0e64     movlw   0x64             	MOVLW	0x64
001a70   0100     movlb   0x0              	BANKSEL	_de
001a72   6fc5     movwf   0xc5, 0x1        	MOVWF	_de, B
                                           ;	.line	86; rtc.c	for (i = 0; i < 8; i++) {
001a74   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001a76   0e08     movlw   0x08             	MOVLW	0x08
001a78   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001a7a   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
001a7c   d7ca     bra     0x001a12         	BRA	_00171_DS_
                                           ;	.line	99; rtc.c	return dados;
001a7e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001a80   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001a82   f002
001a84   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001a86   f001
001a88   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001a8a   f000
001a8c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001a8e   ffd9
001a90   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__writeByte	code
                                           _writeByte:
                                           ;	.line	61; rtc.c	void writeByte(unsigned char dados) {
0014c2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0014c4   ffe5
0014c6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0014c8   ffd9
0014ca   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0014cc   ffe5
0014ce   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0014d0   ffe5
0014d2   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0014d4   ffe5
0014d6   0e02     movlw   0x02             	MOVLW	0x02
0014d8   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0014da   f000
                                           ;	.line	63; rtc.c	for (i = 0; i < 8; i++) {
0014dc   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00127_DS_:
                                           ;	.line	65; rtc.c	if (dados & 0x01) {
0014de   a000     btfss   0x00, 0x0, 0x0   	BTFSS	r0x00, 0
0014e0   d00a     bra     0x0014f6         	BRA	_00116_DS_
                                           ;	.line	66; rtc.c	SDA_ON();
0014e2   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0014e4   f082
0014e6   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0014e8   f002
0014ea   8802     bsf     0x02, 0x4, 0x0   	BSF	r0x02, 4
0014ec   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0014ee   f082
0014f0   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0014f2   ffef
0014f4   d009     bra     0x001508         	BRA	_00117_DS_
                                           _00116_DS_:
                                           ;	.line	68; rtc.c	SDA_OFF();
0014f6   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0014f8   f082
0014fa   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0014fc   f002
0014fe   9802     bcf     0x02, 0x4, 0x0   	BCF	r0x02, 4
001500   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001502   f082
001504   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001506   ffef
                                           _00117_DS_:
                                           ;	.line	71; rtc.c	dados >>= 1;
001508   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00150a   3200     rrcf    0x00, 0x1, 0x0   	RRCF	r0x00, F
                                           ;	.line	73; rtc.c	SCL_ON();
00150c   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00150e   f082
001510   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001512   f002
001514   8602     bsf     0x02, 0x3, 0x0   	BSF	r0x02, 3
001516   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001518   f082
00151a   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00151c   ffef
                                           ;	.line	74; rtc.c	DELAY();
00151e   0e64     movlw   0x64             	MOVLW	0x64
001520   0100     movlb   0x0              	BANKSEL	_de
001522   6fc5     movwf   0xc5, 0x1        	MOVWF	_de, B
                                           _00123_DS_:
001524   0100     movlb   0x0              	BANKSEL	_de
001526   07c5     decf    0xc5, 0x1, 0x1   	DECF	_de, F, B
001528   0100     movlb   0x0              	BANKSEL	_de
00152a   51c5     movf    0xc5, 0x0, 0x1   	MOVF	_de, W, B
00152c   e1fb     bnz     0x001524         	BNZ	_00123_DS_
                                           ;	.line	76; rtc.c	SCL_OFF();
00152e   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001530   f082
001532   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001534   f002
001536   9602     bcf     0x02, 0x3, 0x0   	BCF	r0x02, 3
001538   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00153a   f082
00153c   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00153e   ffef
                                           ;	.line	77; rtc.c	DELAY();
001540   0e64     movlw   0x64             	MOVLW	0x64
001542   0100     movlb   0x0              	BANKSEL	_de
001544   6fc5     movwf   0xc5, 0x1        	MOVWF	_de, B
                                           _00126_DS_:
001546   0100     movlb   0x0              	BANKSEL	_de
001548   07c5     decf    0xc5, 0x1, 0x1   	DECF	_de, F, B
00154a   0100     movlb   0x0              	BANKSEL	_de
00154c   51c5     movf    0xc5, 0x0, 0x1   	MOVF	_de, W, B
00154e   e1fb     bnz     0x001546         	BNZ	_00126_DS_
001550   0e64     movlw   0x64             	MOVLW	0x64
001552   0100     movlb   0x0              	BANKSEL	_de
001554   6fc5     movwf   0xc5, 0x1        	MOVWF	_de, B
                                           ;	.line	63; rtc.c	for (i = 0; i < 8; i++) {
001556   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001558   0e08     movlw   0x08             	MOVLW	0x08
00155a   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
00155c   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00155e   d7bf     bra     0x0014de         	BRA	_00127_DS_
001560   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001562   f002
001564   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001566   f001
001568   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00156a   f000
00156c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00156e   ffd9
001570   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcStart	code
                                           _rtcStart:
                                           ;	.line	53; rtc.c	void rtcStart() {
0023ce   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0023d0   ffe5
0023d2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0023d4   ffd9
0023d6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0023d8   ffe5
                                           ;	.line	55; rtc.c	RESET_OUT();
0023da   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0023dc   f094
0023de   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0023e0   f000
0023e2   9a00     bcf     0x00, 0x5, 0x0   	BCF	r0x00, 5
0023e4   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0023e6   f094
0023e8   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0023ea   ffef
                                           ;	.line	56; rtc.c	SDA_OUT();
0023ec   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0023ee   f094
0023f0   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0023f2   f000
0023f4   9800     bcf     0x00, 0x4, 0x0   	BCF	r0x00, 4
0023f6   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0023f8   f094
0023fa   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0023fc   ffef
                                           ;	.line	57; rtc.c	SCL_OUT();
0023fe   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
002400   f094
002402   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
002404   f000
002406   9600     bcf     0x00, 0x3, 0x0   	BCF	r0x00, 3
002408   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
00240a   f094
00240c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00240e   ffef
                                           ;	.line	58; rtc.c	BitClr(INTCON2, 7); //liga pull up
002410   ee0f     lfsr    0x0, 0xff1       	LFSR	0x00, 0xff1
002412   f0f1
002414   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
002416   f000
002418   9e00     bcf     0x00, 0x7, 0x0   	BCF	r0x00, 7
00241a   ee0f     lfsr    0x0, 0xff1       	LFSR	0x00, 0xff1
00241c   f0f1
00241e   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
002420   ffef
002422   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002424   f000
002426   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002428   ffd9
00242a   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_rtc__rtcInit	code
                                           _rtcInit:
                                           ;	.line	46; rtc.c	void rtcInit() {
00247c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00247e   ffe5
002480   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002482   ffd9
002484   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002486   ffe5
                                           ;	.line	48; rtc.c	RESET_OUT();
002488   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
00248a   f094
00248c   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00248e   f000
002490   9a00     bcf     0x00, 0x5, 0x0   	BCF	r0x00, 5
002492   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
002494   f094
002496   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
002498   ffef
                                           ;	.line	49; rtc.c	SDA_OUT();
00249a   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
00249c   f094
00249e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0024a0   f000
0024a2   9800     bcf     0x00, 0x4, 0x0   	BCF	r0x00, 4
0024a4   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0024a6   f094
0024a8   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0024aa   ffef
                                           ;	.line	50; rtc.c	SCL_OUT();
0024ac   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0024ae   f094
0024b0   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0024b2   f000
0024b4   9600     bcf     0x00, 0x3, 0x0   	BCF	r0x00, 3
0024b6   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0024b8   f094
0024ba   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0024bc   ffef
0024be   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0024c0   f000
0024c2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0024c4   ffd9
0024c6   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2274 (0x08e2) bytes ( 1.73%)
                                           ;           	 1137 (0x0471) words
                                           ; udata size:	    1 (0x0001) bytes ( 0.08%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_serialSend
                                           	global	_serialRead
                                           	global	_serialInit
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_serial__serialInit	code
                                           _serialInit:
                                           ;	.line	41; serial.c	void serialInit(void) {
00236c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00236e   ffe5
002370   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002372   ffd9
002374   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002376   ffe5
                                           ;	.line	42; serial.c	TXSTA = 0b00101100; //configura a transmissão de dados da serial
002378   ee0f     lfsr    0x0, 0xfac       	LFSR	0x00, 0xfac
00237a   f0ac
00237c   0e2c     movlw   0x2c             	MOVLW	0x2c
00237e   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	43; serial.c	RCSTA = 0b10010000; //configura a recepção de dados da serial
002380   ee0f     lfsr    0x0, 0xfab       	LFSR	0x00, 0xfab
002382   f0ab
002384   0e90     movlw   0x90             	MOVLW	0x90
002386   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	44; serial.c	BAUDCON = 0b00001000; //configura sistema de velocidade da serial
002388   ee0f     lfsr    0x0, 0xfb8       	LFSR	0x00, 0xfb8
00238a   f0b8
00238c   0e08     movlw   0x08             	MOVLW	0x08
00238e   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	45; serial.c	SPBRGH = 0; //configura para 57.6k
002390   ee0f     lfsr    0x0, 0xfb0       	LFSR	0x00, 0xfb0
002392   f0b0
002394   0e00     movlw   0x00             	MOVLW	0x00
002396   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	46; serial.c	SPBRG = 34; //configura para 57.6k
002398   ee0f     lfsr    0x0, 0xfaf       	LFSR	0x00, 0xfaf
00239a   f0af
00239c   0e22     movlw   0x22             	MOVLW	0x22
00239e   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	47; serial.c	BitSet(TRISC, 6); //pino de recepção de dados
0023a0   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0023a2   f094
0023a4   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0023a6   f000
0023a8   8c00     bsf     0x00, 0x6, 0x0   	BSF	r0x00, 6
0023aa   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0023ac   f094
0023ae   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0023b0   ffef
                                           ;	.line	48; serial.c	BitSet(TRISC, 7); //pino de envio de dados
0023b2   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0023b4   f094
0023b6   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0023b8   f000
0023ba   8e00     bsf     0x00, 0x7, 0x0   	BSF	r0x00, 7
0023bc   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0023be   f094
0023c0   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0023c2   ffef
0023c4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0023c6   f000
0023c8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0023ca   ffd9
0023cc   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__serialRead	code
                                           _serialRead:
                                           ;	.line	28; serial.c	unsigned char serialRead(void) {
002306   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002308   ffe5
00230a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00230c   ffd9
00230e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002310   ffe5
002312   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002314   ffe5
                                           ;	.line	29; serial.c	unsigned char resp = 0;
002316   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ;	.line	31; serial.c	if (BitTst(RCSTA, 1)) { //Verifica se há erro de overrun e reseta a serial
002318   ee0f     lfsr    0x0, 0xfab       	LFSR	0x00, 0xfab
00231a   f0ab
00231c   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
00231e   f001
002320   a201     btfss   0x01, 0x1, 0x0   	BTFSS	r0x01, 1
002322   d012     bra     0x002348         	BRA	_00122_DS_
                                           ;	.line	32; serial.c	BitClr(RCSTA, 4);
002324   ee0f     lfsr    0x0, 0xfab       	LFSR	0x00, 0xfab
002326   f0ab
002328   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
00232a   f001
00232c   9801     bcf     0x01, 0x4, 0x0   	BCF	r0x01, 4
00232e   ee0f     lfsr    0x0, 0xfab       	LFSR	0x00, 0xfab
002330   f0ab
002332   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
002334   ffef
                                           ;	.line	33; serial.c	BitSet(RCSTA, 4);
002336   ee0f     lfsr    0x0, 0xfab       	LFSR	0x00, 0xfab
002338   f0ab
00233a   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
00233c   f001
00233e   8801     bsf     0x01, 0x4, 0x0   	BSF	r0x01, 4
002340   ee0f     lfsr    0x0, 0xfab       	LFSR	0x00, 0xfab
002342   f0ab
002344   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
002346   ffef
                                           _00122_DS_:
                                           ;	.line	35; serial.c	if (BitTst(PIR1, 5)) { //Verifica se existe algum valor disponivel
002348   ee0f     lfsr    0x0, 0xf9e       	LFSR	0x00, 0xf9e
00234a   f09e
00234c   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
00234e   f001
002350   aa01     btfss   0x01, 0x5, 0x0   	BTFSS	r0x01, 5
002352   d004     bra     0x00235c         	BRA	_00124_DS_
                                           ;	.line	36; serial.c	resp = RCREG; //retorna o valor
002354   ee0f     lfsr    0x0, 0xfae       	LFSR	0x00, 0xfae
002356   f0ae
002358   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00235a   f000
                                           _00124_DS_:
                                           ;	.line	38; serial.c	return resp; //retorna zero
00235c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00235e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002360   f001
002362   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002364   f000
002366   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002368   ffd9
00236a   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__serialSend	code
                                           _serialSend:
                                           ;	.line	23; serial.c	void serialSend(unsigned char c) {
002724   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002726   ffe5
002728   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00272a   ffd9
00272c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00272e   ffe5
002730   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002732   ffe5
002734   0e02     movlw   0x02             	MOVLW	0x02
002736   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002738   f000
                                           _00105_DS_:
                                           ;	.line	24; serial.c	while (!BitTst(PIR1, 4)); //aguarda o registro ficar disponível
00273a   ee0f     lfsr    0x0, 0xf9e       	LFSR	0x00, 0xf9e
00273c   f09e
00273e   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
002740   f001
002742   a801     btfss   0x01, 0x4, 0x0   	BTFSS	r0x01, 4
002744   d7fa     bra     0x00273a         	BRA	_00105_DS_
                                           ;	.line	25; serial.c	TXREG = c; //coloca o valor para ser enviado
002746   ee0f     lfsr    0x0, 0xfad       	LFSR	0x00, 0xfad
002748   f0ad
00274a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00274c   ffef
00274e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002750   f001
002752   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002754   f000
002756   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002758   ffd9
00275a   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  256 (0x0100) bytes ( 0.20%)
                                           ;           	  128 (0x0080) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    2 (0x0002) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_ssdDigit
                                           	global	_ssdUpdate
                                           	global	_ssdInit
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_ssd_0	udata
                                           _display	res	1
                                           
                                           udata_ssd_1	udata
                                           _v0	res	1
                                           
                                           udata_ssd_2	udata
                                           _v1	res	1
                                           
                                           udata_ssd_3	udata
                                           _v2	res	1
                                           
                                           udata_ssd_4	udata
                                           _v3	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ssd__ssdInit	code
                                           _ssdInit:
                                           ;	.line	85; ssd.c	void ssdInit(void) {
00201c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00201e   ffe5
002020   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002022   ffd9
002024   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002026   ffe5
                                           ;	.line	87; ssd.c	BitClr(TRISA, 2);
002028   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
00202a   f092
00202c   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00202e   f000
002030   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
002032   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
002034   f092
002036   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
002038   ffef
                                           ;	.line	88; ssd.c	BitClr(TRISA, 5);
00203a   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
00203c   f092
00203e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
002040   f000
002042   9a00     bcf     0x00, 0x5, 0x0   	BCF	r0x00, 5
002044   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
002046   f092
002048   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00204a   ffef
                                           ;	.line	89; ssd.c	BitClr(TRISE, 0);
00204c   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
00204e   f096
002050   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
002052   f000
002054   9000     bcf     0x00, 0x0, 0x0   	BCF	r0x00, 0
002056   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
002058   f096
00205a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00205c   ffef
                                           ;	.line	90; ssd.c	BitClr(TRISE, 2);
00205e   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
002060   f096
002062   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
002064   f000
002066   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
002068   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
00206a   f096
00206c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00206e   ffef
                                           ;	.line	91; ssd.c	ADCON1 = 0x0E; //apenas AN0 é analogico, a referencia é baseada na fonte
002070   ee0f     lfsr    0x0, 0xfc1       	LFSR	0x00, 0xfc1
002072   f0c1
002074   0e0e     movlw   0x0e             	MOVLW	0x0e
002076   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	92; ssd.c	TRISD = 0x00; //Porta de dados
002078   ee0f     lfsr    0x0, 0xf95       	LFSR	0x00, 0xf95
00207a   f095
00207c   0e00     movlw   0x00             	MOVLW	0x00
00207e   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
002080   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002082   f000
002084   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002086   ffd9
002088   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ssd__ssdUpdate	code
                                           _ssdUpdate:
                                           ;	.line	47; ssd.c	void ssdUpdate(void) {
000632   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000634   ffe5
000636   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000638   ffd9
00063a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00063c   ffe5
00063e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000640   ffe5
000642   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000644   ffe5
                                           ;	.line	49; ssd.c	PORTA = 0x00;
000646   ee0f     lfsr    0x0, 0xf80       	LFSR	0x00, 0xf80
000648   f080
00064a   0e00     movlw   0x00             	MOVLW	0x00
00064c   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	50; ssd.c	PORTE = 0x00;
00064e   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
000650   f084
000652   0e00     movlw   0x00             	MOVLW	0x00
000654   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	52; ssd.c	PORTD = 0x00;
000656   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
000658   f083
00065a   0e00     movlw   0x00             	MOVLW	0x00
00065c   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	54; ssd.c	switch (display){ //liga apenas o display da vez
00065e   0e04     movlw   0x04             	MOVLW	0x04
000660   0100     movlb   0x0              	BANKSEL	_display
000662   5dc6     subwf   0xc6, 0x0, 0x1   	SUBWF	_display, W, B
000664   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000666   d0a7     bra     0x0007b6         	BRA	_00141_DS_
000668   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
00066a   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
00066c   0100     movlb   0x0              	BANKSEL	_display
00066e   35c6     rlcf    0xc6, 0x0, 0x1   	RLCF	_display, W, B
000670   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
000672   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
000674   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
000676   0bfc     andlw   0xfc             	ANDLW	0xfc
000678   0f88     addlw   0x88             	ADDLW	LOW(_00149_DS_)
00067a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00067c   0e06     movlw   0x06             	MOVLW	HIGH(_00149_DS_)
00067e   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
000680   0e00     movlw   0x00             	MOVLW	UPPER(_00149_DS_)
000682   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
000684   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
000686   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00149_DS_:
000688   ef4c     goto    0x000698         	GOTO	_00137_DS_
00068a   f003
00068c   ef70     goto    0x0006e0         	GOTO	_00138_DS_
00068e   f003
000690   ef94     goto    0x000728         	GOTO	_00139_DS_
000692   f003
000694   efb8     goto    0x000770         	GOTO	_00140_DS_
000696   f003
                                           _00137_DS_:
                                           ;	.line	56; ssd.c	PORTD = valor[v0];
000698   0e9a     movlw   0x9a             	MOVLW	LOW(_valor)
00069a   0100     movlb   0x0              	BANKSEL	_v0
00069c   25c7     addwf   0xc7, 0x0, 0x1   	ADDWF	_v0, W, B
00069e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0006a0   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0006a2   0e2a     movlw   0x2a             	MOVLW	HIGH(_valor)
0006a4   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0006a6   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0006a8   0e00     movlw   0x00             	MOVLW	UPPER(_valor)
0006aa   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0006ac   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
0006ae   fff6
0006b0   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
0006b2   fff7
0006b4   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
0006b6   fff8
0006b8   0009     tblrd*+                  	TBLRD*+	
0006ba   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
0006bc   f000
0006be   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
0006c0   f083
0006c2   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0006c4   ffef
                                           ;	.line	57; ssd.c	BitSet(PORTA, 5);
0006c6   ee0f     lfsr    0x0, 0xf80       	LFSR	0x00, 0xf80
0006c8   f080
0006ca   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0006cc   f000
0006ce   8a00     bsf     0x00, 0x5, 0x0   	BSF	r0x00, 5
0006d0   ee0f     lfsr    0x0, 0xf80       	LFSR	0x00, 0xf80
0006d2   f080
0006d4   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0006d6   ffef
                                           ;	.line	58; ssd.c	display = 1;
0006d8   0e01     movlw   0x01             	MOVLW	0x01
0006da   0100     movlb   0x0              	BANKSEL	_display
0006dc   6fc6     movwf   0xc6, 0x1        	MOVWF	_display, B
                                           ;	.line	59; ssd.c	break;
0006de   d06d     bra     0x0007ba         	BRA	_00143_DS_
                                           _00138_DS_:
                                           ;	.line	62; ssd.c	PORTD = valor[v1];
0006e0   0e9a     movlw   0x9a             	MOVLW	LOW(_valor)
0006e2   0100     movlb   0x0              	BANKSEL	_v1
0006e4   25c8     addwf   0xc8, 0x0, 0x1   	ADDWF	_v1, W, B
0006e6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0006e8   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0006ea   0e2a     movlw   0x2a             	MOVLW	HIGH(_valor)
0006ec   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0006ee   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0006f0   0e00     movlw   0x00             	MOVLW	UPPER(_valor)
0006f2   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0006f4   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
0006f6   fff6
0006f8   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
0006fa   fff7
0006fc   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
0006fe   fff8
000700   0009     tblrd*+                  	TBLRD*+	
000702   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
000704   f000
000706   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
000708   f083
00070a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00070c   ffef
                                           ;	.line	63; ssd.c	BitSet(PORTA, 2);
00070e   ee0f     lfsr    0x0, 0xf80       	LFSR	0x00, 0xf80
000710   f080
000712   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000714   f000
000716   8400     bsf     0x00, 0x2, 0x0   	BSF	r0x00, 2
000718   ee0f     lfsr    0x0, 0xf80       	LFSR	0x00, 0xf80
00071a   f080
00071c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00071e   ffef
                                           ;	.line	64; ssd.c	display = 2;
000720   0e02     movlw   0x02             	MOVLW	0x02
000722   0100     movlb   0x0              	BANKSEL	_display
000724   6fc6     movwf   0xc6, 0x1        	MOVWF	_display, B
                                           ;	.line	65; ssd.c	break;
000726   d049     bra     0x0007ba         	BRA	_00143_DS_
                                           _00139_DS_:
                                           ;	.line	68; ssd.c	PORTD = valor[v2];
000728   0e9a     movlw   0x9a             	MOVLW	LOW(_valor)
00072a   0100     movlb   0x0              	BANKSEL	_v2
00072c   25c9     addwf   0xc9, 0x0, 0x1   	ADDWF	_v2, W, B
00072e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000730   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000732   0e2a     movlw   0x2a             	MOVLW	HIGH(_valor)
000734   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000736   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000738   0e00     movlw   0x00             	MOVLW	UPPER(_valor)
00073a   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00073c   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
00073e   fff6
000740   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
000742   fff7
000744   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
000746   fff8
000748   0009     tblrd*+                  	TBLRD*+	
00074a   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
00074c   f000
00074e   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
000750   f083
000752   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000754   ffef
                                           ;	.line	69; ssd.c	BitSet(PORTE, 0);
000756   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
000758   f084
00075a   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00075c   f000
00075e   8000     bsf     0x00, 0x0, 0x0   	BSF	r0x00, 0
000760   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
000762   f084
000764   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000766   ffef
                                           ;	.line	70; ssd.c	display = 3;
000768   0e03     movlw   0x03             	MOVLW	0x03
00076a   0100     movlb   0x0              	BANKSEL	_display
00076c   6fc6     movwf   0xc6, 0x1        	MOVWF	_display, B
                                           ;	.line	71; ssd.c	break;
00076e   d025     bra     0x0007ba         	BRA	_00143_DS_
                                           _00140_DS_:
                                           ;	.line	74; ssd.c	PORTD = valor[v3];
000770   0e9a     movlw   0x9a             	MOVLW	LOW(_valor)
000772   0100     movlb   0x0              	BANKSEL	_v3
000774   25ca     addwf   0xca, 0x0, 0x1   	ADDWF	_v3, W, B
000776   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000778   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00077a   0e2a     movlw   0x2a             	MOVLW	HIGH(_valor)
00077c   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00077e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000780   0e00     movlw   0x00             	MOVLW	UPPER(_valor)
000782   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
000784   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
000786   fff6
000788   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
00078a   fff7
00078c   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
00078e   fff8
000790   0009     tblrd*+                  	TBLRD*+	
000792   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
000794   f000
000796   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
000798   f083
00079a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00079c   ffef
                                           ;	.line	75; ssd.c	BitSet(PORTE, 2);
00079e   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0007a0   f084
0007a2   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0007a4   f000
0007a6   8400     bsf     0x00, 0x2, 0x0   	BSF	r0x00, 2
0007a8   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0007aa   f084
0007ac   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0007ae   ffef
0007b0   0100     movlb   0x0              	BANKSEL	_display
                                           ;	.line	76; ssd.c	display = 0;
0007b2   6bc6     clrf    0xc6, 0x1        	CLRF	_display, B
                                           ;	.line	77; ssd.c	break;
0007b4   d002     bra     0x0007ba         	BRA	_00143_DS_
                                           _00141_DS_:
0007b6   0100     movlb   0x0              	BANKSEL	_display
                                           ;	.line	80; ssd.c	display = 0;
0007b8   6bc6     clrf    0xc6, 0x1        	CLRF	_display, B
                                           _00143_DS_:
                                           ;	.line	82; ssd.c	}
0007ba   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0007bc   f002
0007be   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0007c0   f001
0007c2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0007c4   f000
0007c6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0007c8   ffd9
0007ca   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ssd__ssdDigit	code
                                           _ssdDigit:
                                           ;	.line	31; ssd.c	void ssdDigit(char val, char pos) {
00242c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00242e   ffe5
002430   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002432   ffd9
002434   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002436   ffe5
002438   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00243a   ffe5
00243c   0e02     movlw   0x02             	MOVLW	0x02
00243e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002440   f000
002442   0e03     movlw   0x03             	MOVLW	0x03
002444   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002446   f001
                                           ;	.line	32; ssd.c	if (pos == 0) {
002448   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00244a   e102     bnz     0x002450         	BNZ	_00106_DS_
                                           ;	.line	33; ssd.c	v0 = val;
00244c   c000     movff   0x000, 0x0c7     	MOVFF	r0x00, _v0
00244e   f0c7
                                           _00106_DS_:
                                           ;	.line	35; ssd.c	if (pos == 1) {
002450   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002452   0a01     xorlw   0x01             	XORLW	0x01
002454   e102     bnz     0x00245a         	BNZ	_00108_DS_
                                           ;	.line	36; ssd.c	v1 = val;
002456   c000     movff   0x000, 0x0c8     	MOVFF	r0x00, _v1
002458   f0c8
                                           _00108_DS_:
                                           ;	.line	38; ssd.c	if (pos == 2) {
00245a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00245c   0a02     xorlw   0x02             	XORLW	0x02
00245e   e102     bnz     0x002464         	BNZ	_00110_DS_
                                           ;	.line	39; ssd.c	v2 = val;
002460   c000     movff   0x000, 0x0c9     	MOVFF	r0x00, _v2
002462   f0c9
                                           _00110_DS_:
                                           ;	.line	41; ssd.c	if (pos == 3) {
002464   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002466   0a03     xorlw   0x03             	XORLW	0x03
002468   e102     bnz     0x00246e         	BNZ	_00113_DS_
                                           ;	.line	42; ssd.c	v3 = val;
00246a   c000     movff   0x000, 0x0ca     	MOVFF	r0x00, _v3
00246c   f0ca
                                           _00113_DS_:
00246e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002470   f001
002472   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002474   f000
002476   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002478   ffd9
00247a   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _valor:
002a9a   063f     decf    0x3f, 0x1, 0x0   	DB	0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c
002a9c   4f5b     dcfsnz  0x5b, 0x1, 0x1   
002a9e   6d66     negf    0x66, 0x1        
002aa0   077d     decf    0x7d, 0x1, 0x1   
002aa2   6f7f     movwf   0x7f, 0x1        
002aa4   7c77     btg     0x77, 0x6, 0x0   
002aa6   5e39     subwf   0x39, 0x1, 0x0   	DB	0x39, 0x5e, 0x79, 0x71
002aa8   7179     btg     0x79, 0x0, 0x1   
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  606 (0x025e) bytes ( 0.46%)
                                           ;           	  303 (0x012f) words
                                           ; udata size:	    5 (0x0005) bytes ( 0.39%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_printf
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrget1
                                           	extern	_lcdData
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_stdio__printf	code
                                           _printf:
                                           ;	.line	3; stdio.c	void printf(char txt[16]) {
001774   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001776   ffe5
001778   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00177a   ffd9
00177c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00177e   ffe5
001780   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001782   ffe5
001784   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001786   ffe5
001788   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00178a   ffe5
00178c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00178e   ffe5
001790   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001792   ffe5
001794   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001796   ffe5
001798   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
00179a   ffe5
00179c   0e02     movlw   0x02             	MOVLW	0x02
00179e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0017a0   f000
0017a2   0e03     movlw   0x03             	MOVLW	0x03
0017a4   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0017a6   f001
0017a8   0e04     movlw   0x04             	MOVLW	0x04
0017aa   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0017ac   f002
                                           ;	.line	5; stdio.c	for (i = 0; i < 16; i++) {
0017ae   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0017b0   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00106_DS_:
                                           ;	.line	6; stdio.c	lcdData(txt[i]);
0017b2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0017b4   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0017b6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0017b8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0017ba   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0017bc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0017be   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0017c0   be04     btfsc   0x04, 0x7, 0x0   	BTFSC	r0x04, 7
0017c2   68e8     setf    0xe8, 0x0        	SETF	WREG
0017c4   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
0017c6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0017c8   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0017ca   ffe9
0017cc   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0017ce   fff3
0017d0   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0017d2   ec98     call    0x002930, 0x0call    0x002930, 0x0 	CALL	__gptrget1
0017d4   f014
0017d6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0017d8   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0017da   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017dc   ecd8     call    0x001bb0, 0x0call    0x001bb0, 0x0 	CALL	_lcdData
0017de   f00d
0017e0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	5; stdio.c	for (i = 0; i < 16; i++) {
0017e2   4a03     infsnz  0x03, 0x1, 0x0   	INFSNZ	r0x03, F
0017e4   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
0017e6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0017e8   0f80     addlw   0x80             	ADDLW	0x80
0017ea   0f80     addlw   0x80             	ADDLW	0x80
0017ec   e102     bnz     0x0017f2         	BNZ	_00114_DS_
0017ee   0e10     movlw   0x10             	MOVLW	0x10
0017f0   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
                                           _00114_DS_:
0017f2   e3df     bnc     0x0017b2         	BNC	_00106_DS_
0017f4   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0017f6   f007
0017f8   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0017fa   f006
0017fc   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0017fe   f005
001800   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001802   f004
001804   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001806   f003
001808   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00180a   f002
00180c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00180e   f001
001810   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001812   f000
001814   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001816   ffd9
001818   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  166 (0x00a6) bytes ( 0.13%)
                                           ;           	   83 (0x0053) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    8 (0x0008) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_timerEnded
                                           	global	_timerWait
                                           	global	_timerReset
                                           	global	_timerInit
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__mulint
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_timer__timerInit	code
                                           _timerInit:
                                           ;	.line	46; timer.c	void timerInit(void) {
0027c4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0027c6   ffe5
0027c8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0027ca   ffd9
0027cc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0027ce   ffe5
                                           ;	.line	47; timer.c	T0CON = 0b00001000; //configura timer 0 sem prescaler
0027d0   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
0027d2   f0d5
0027d4   0e08     movlw   0x08             	MOVLW	0x08
0027d6   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	48; timer.c	BitSet(T0CON, 7); //liga o timer 0
0027d8   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
0027da   f0d5
0027dc   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0027de   f000
0027e0   8e00     bsf     0x00, 0x7, 0x0   	BSF	r0x00, 7
0027e2   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
0027e4   f0d5
0027e6   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0027e8   ffef
0027ea   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0027ec   f000
0027ee   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0027f0   ffd9
0027f2   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_timer__timerReset	code
                                           _timerReset:
                                           ;	.line	33; timer.c	void timerReset(unsigned int tempo) {
0011d0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0011d2   ffe5
0011d4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0011d6   ffd9
0011d8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0011da   ffe5
0011dc   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0011de   ffe5
0011e0   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0011e2   ffe5
0011e4   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0011e6   ffe5
0011e8   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0011ea   ffe5
0011ec   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0011ee   ffe5
0011f0   0e02     movlw   0x02             	MOVLW	0x02
0011f2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0011f4   f000
0011f6   0e03     movlw   0x03             	MOVLW	0x03
0011f8   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0011fa   f001
                                           ;	.line	35; timer.c	unsigned ciclos = tempo * 2;
0011fc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0011fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001200   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001202   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001204   0e00     movlw   0x00             	MOVLW	0x00
001206   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001208   0e02     movlw   0x02             	MOVLW	0x02
00120a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00120c   ec5e     call    0x0018bc, 0x0call    0x0018bc, 0x0 	CALL	__mulint
00120e   f00c
001210   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001212   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001214   f001
001216   0e04     movlw   0x04             	MOVLW	0x04
001218   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	37; timer.c	ciclos = 65535 - ciclos;
00121a   c000     movff   0x000, 0x002     	MOVFF	r0x00, r0x02
00121c   f002
00121e   c001     movff   0x001, 0x003     	MOVFF	r0x01, r0x03
001220   f003
001222   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001224   6a05     clrf    0x05, 0x0        	CLRF	r0x05
001226   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001228   08ff     sublw   0xff             	SUBLW	0xff
00122a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00122c   0eff     movlw   0xff             	MOVLW	0xff
00122e   5603     subfwb  0x03, 0x1, 0x0   	SUBFWB	r0x03, F
001230   0e00     movlw   0x00             	MOVLW	0x00
001232   5604     subfwb  0x04, 0x1, 0x0   	SUBFWB	r0x04, F
001234   0e00     movlw   0x00             	MOVLW	0x00
001236   5605     subfwb  0x05, 0x1, 0x0   	SUBFWB	r0x05, F
001238   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00123a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00123c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00123e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	39; timer.c	ciclos -= 14; //subtrai tempo de overhead(experimental)
001240   0ef2     movlw   0xf2             	MOVLW	0xf2
001242   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001244   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
001246   0601     decf    0x01, 0x1, 0x0   	DECF	r0x01, F
                                           ;	.line	40; timer.c	TMR0H = (ciclos >> 8); //salva a parte alta
001248   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00124a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00124c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00124e   ee0f     lfsr    0x0, 0xfd7       	LFSR	0x00, 0xfd7
001250   f0d7
001252   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001254   ffef
                                           ;	.line	41; timer.c	TMR0L = (ciclos & 0x00FF); // salva a parte baixa
001256   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001258   ee0f     lfsr    0x0, 0xfd6       	LFSR	0x00, 0xfd6
00125a   f0d6
00125c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00125e   ffef
                                           ;	.line	43; timer.c	BitClr(INTCON, 2); //limpa a flag de overflow
001260   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
001262   f0f2
001264   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001266   f000
001268   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
00126a   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
00126c   f0f2
00126e   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001270   ffef
001272   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001274   f005
001276   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001278   f004
00127a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00127c   f003
00127e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001280   f002
001282   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001284   f001
001286   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001288   f000
00128a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00128c   ffd9
00128e   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_timer__timerWait	code
                                           _timerWait:
                                           ;	.line	27; timer.c	void timerWait(void) {
00290e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002910   ffe5
002912   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002914   ffd9
002916   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002918   ffe5
                                           _00110_DS_:
                                           ;	.line	28; timer.c	while (!BitTst(INTCON, 2));
00291a   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
00291c   f0f2
00291e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
002920   f000
002922   a400     btfss   0x00, 0x2, 0x0   	BTFSS	r0x00, 2
002924   d7fa     bra     0x00291a         	BRA	_00110_DS_
002926   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002928   f000
00292a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00292c   ffd9
00292e   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_timer__timerEnded	code
                                           _timerEnded:
                                           ;	.line	23; timer.c	char timerEnded(void) {
0028c6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0028c8   ffe5
0028ca   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0028cc   ffd9
0028ce   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0028d0   ffe5
                                           ;	.line	24; timer.c	return BitTst(INTCON, 2);
0028d2   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
0028d4   f0f2
0028d6   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0028d8   f000
0028da   0e04     movlw   0x04             	MOVLW	0x04
0028dc   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0028de   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0028e0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0028e2   f000
0028e4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0028e6   ffd9
0028e8   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  310 (0x0136) bytes ( 0.24%)
                                           ;           	  155 (0x009b) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_outputInit
                                           	global	_outputPrint
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_lcdCommand
                                           	extern	_lcdString
                                           	extern	_lcdInt
                                           	extern	_lcdInit
                                           	extern	_getTime
                                           	extern	_getAlarmLevel
                                           	extern	_getLanguage
                                           	extern	__mulint
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           	idata
                                           _msgs	db	LOW(___str_3), HIGH(___str_3), UPPER(___str_3), LOW(___str_4), HIGH(___str_4), UPPER(___str_4), LOW(___str_5), HIGH(___str_5), UPPER(___str_5), LOW(___str_6), HIGH(___str_6), UPPER(___str_6)
                                           	db	LOW(___str_7), HIGH(___str_7), UPPER(___str_7), LOW(___str_8), HIGH(___str_8), UPPER(___str_8)
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_output__outputPrint	code
                                           _outputPrint:
                                           ;	.line	20; output.c	void outputPrint(int numTela, int idioma) {
000004   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000006   ffe5
000008   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00000a   ffd9
00000c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00000e   ffe5
000010   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000012   ffe5
000014   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000016   ffe5
000018   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00001a   ffe5
00001c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00001e   ffe5
000020   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
000022   ffe5
000024   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
000026   ffe5
000028   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
00002a   ffe5
00002c   0e02     movlw   0x02             	MOVLW	0x02
00002e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000030   f000
000032   0e03     movlw   0x03             	MOVLW	0x03
000034   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
000036   f001
000038   0e04     movlw   0x04             	MOVLW	0x04
00003a   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00003c   f002
00003e   0e05     movlw   0x05             	MOVLW	0x05
000040   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
000042   f003
                                           ;	.line	22; output.c	if (numTela == STATE_TEMPO) {
000044   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000046   0a01     xorlw   0x01             	XORLW	0x01
000048   e102     bnz     0x00004e         	BNZ	_00137_DS_
00004a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00004c   e001     bz      0x000050         	BZ	_00138_DS_
                                           _00137_DS_:
00004e   d061     bra     0x000112         	BRA	_00111_DS_
                                           _00138_DS_:
                                           ;	.line	23; output.c	lcdCommand(0x80);
000050   0e80     movlw   0x80             	MOVLW	0x80
000052   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000054   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_lcdCommand
000056   f00e
000058   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	24; output.c	lcdString(msgs[numTela][idioma]);
00005a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00005c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00005e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000060   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000062   0e00     movlw   0x00             	MOVLW	0x00
000064   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000066   0e06     movlw   0x06             	MOVLW	0x06
000068   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00006a   ec5e     call    0x0018bc, 0x0call    0x0018bc, 0x0 	CALL	__mulint
00006c   f00c
00006e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000070   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000072   f005
000074   0e04     movlw   0x04             	MOVLW	0x04
000076   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000078   0ea1     movlw   0xa1             	MOVLW	LOW(_msgs)
00007a   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00007c   0e00     movlw   0x00             	MOVLW	HIGH(_msgs)
00007e   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000080   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000082   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000084   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000086   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000088   0e00     movlw   0x00             	MOVLW	0x00
00008a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00008c   0e03     movlw   0x03             	MOVLW	0x03
00008e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000090   ec5e     call    0x0018bc, 0x0call    0x0018bc, 0x0 	CALL	__mulint
000092   f00c
000094   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000096   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
000098   f007
00009a   0e04     movlw   0x04             	MOVLW	0x04
00009c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00009e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0000a0   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0000a2   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0000a4   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0000a6   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0000a8   ffe9
0000aa   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0000ac   ffea
0000ae   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0000b0   f004
0000b2   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
0000b4   f005
0000b6   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
0000b8   f006
0000ba   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0000bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000be   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0000c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000c2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0000c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000c6   ecae     call    0x00195c, 0x0call    0x00195c, 0x0 	CALL	_lcdString
0000c8   f00c
0000ca   0e03     movlw   0x03             	MOVLW	0x03
0000cc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	25; output.c	lcdCommand(0xC0);
0000ce   0ec0     movlw   0xc0             	MOVLW	0xc0
0000d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000d2   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_lcdCommand
0000d4   f00e
0000d6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	26; output.c	lcdInt(getTime());
0000d8   ec1d     call    0x002a3a, 0x0call    0x002a3a, 0x0 	CALL	_getTime
0000da   f015
0000dc   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0000de   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0000e0   f005
0000e2   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0000e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000e6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0000e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000ea   ec76     call    0x0002ec, 0x0call    0x0002ec, 0x0 	CALL	_lcdInt
0000ec   f001
0000ee   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0000f0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	27; output.c	lcdString("           ");//para apagar os textos depois do numero
0000f2   0e00     movlw   0x00             	MOVLW	UPPER(___str_0)
0000f4   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0000f6   0e18     movlw   0x18             	MOVLW	HIGH(___str_0)
0000f8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0000fa   0e2c     movlw   0x2c             	MOVLW	LOW(___str_0)
0000fc   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0000fe   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000100   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000102   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000104   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000106   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000108   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00010a   ecae     call    0x00195c, 0x0call    0x00195c, 0x0 	CALL	_lcdString
00010c   f00c
00010e   0e03     movlw   0x03             	MOVLW	0x03
000110   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00111_DS_:
                                           ;	.line	29; output.c	if (numTela == STATE_ALARME) {
000112   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000114   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
000116   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
000118   d061     bra     0x0001dc         	BRA	_00113_DS_
                                           ;	.line	30; output.c	lcdCommand(0x80);
00011a   0e80     movlw   0x80             	MOVLW	0x80
00011c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00011e   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_lcdCommand
000120   f00e
000122   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	31; output.c	lcdString(msgs[numTela][idioma]);
000124   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000126   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000128   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00012a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00012c   0e00     movlw   0x00             	MOVLW	0x00
00012e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000130   0e06     movlw   0x06             	MOVLW	0x06
000132   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000134   ec5e     call    0x0018bc, 0x0call    0x0018bc, 0x0 	CALL	__mulint
000136   f00c
000138   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00013a   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
00013c   f005
00013e   0e04     movlw   0x04             	MOVLW	0x04
000140   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000142   0ea1     movlw   0xa1             	MOVLW	LOW(_msgs)
000144   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000146   0e00     movlw   0x00             	MOVLW	HIGH(_msgs)
000148   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00014a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00014c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00014e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000150   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000152   0e00     movlw   0x00             	MOVLW	0x00
000154   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000156   0e03     movlw   0x03             	MOVLW	0x03
000158   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00015a   ec5e     call    0x0018bc, 0x0call    0x0018bc, 0x0 	CALL	__mulint
00015c   f00c
00015e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000160   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
000162   f007
000164   0e04     movlw   0x04             	MOVLW	0x04
000166   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000168   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00016a   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00016c   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00016e   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000170   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000172   ffe9
000174   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000176   ffea
000178   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
00017a   f004
00017c   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
00017e   f005
000180   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
000182   f006
000184   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000186   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000188   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00018a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00018c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00018e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000190   ecae     call    0x00195c, 0x0call    0x00195c, 0x0 	CALL	_lcdString
000192   f00c
000194   0e03     movlw   0x03             	MOVLW	0x03
000196   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	32; output.c	lcdCommand(0xC0);
000198   0ec0     movlw   0xc0             	MOVLW	0xc0
00019a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00019c   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_lcdCommand
00019e   f00e
0001a0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	33; output.c	lcdInt(getAlarmLevel());
0001a2   ec12     call    0x002a24, 0x0call    0x002a24, 0x0 	CALL	_getAlarmLevel
0001a4   f015
0001a6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0001a8   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0001aa   f005
0001ac   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0001ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001b0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0001b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001b4   ec76     call    0x0002ec, 0x0call    0x0002ec, 0x0 	CALL	_lcdInt
0001b6   f001
0001b8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0001ba   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	34; output.c	lcdString("           ");//para apagar os textos depois do numero
0001bc   0e00     movlw   0x00             	MOVLW	UPPER(___str_0)
0001be   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0001c0   0e18     movlw   0x18             	MOVLW	HIGH(___str_0)
0001c2   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0001c4   0e2c     movlw   0x2c             	MOVLW	LOW(___str_0)
0001c6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0001c8   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0001ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001cc   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0001ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001d0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0001d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001d4   ecae     call    0x00195c, 0x0call    0x00195c, 0x0 	CALL	_lcdString
0001d6   f00c
0001d8   0e03     movlw   0x03             	MOVLW	0x03
0001da   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00113_DS_:
                                           ;	.line	36; output.c	if (numTela == STATE_IDIOMA) {
0001dc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0001de   0a02     xorlw   0x02             	XORLW	0x02
0001e0   e102     bnz     0x0001e6         	BNZ	_00139_DS_
0001e2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0001e4   e001     bz      0x0001e8         	BZ	_00140_DS_
                                           _00139_DS_:
0001e6   d06f     bra     0x0002c6         	BRA	_00120_DS_
                                           _00140_DS_:
                                           ;	.line	37; output.c	lcdCommand(0x80);
0001e8   0e80     movlw   0x80             	MOVLW	0x80
0001ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001ec   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_lcdCommand
0001ee   f00e
0001f0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	38; output.c	lcdString(msgs[numTela][idioma]);
0001f2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0001f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001f6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0001f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001fa   0e00     movlw   0x00             	MOVLW	0x00
0001fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001fe   0e06     movlw   0x06             	MOVLW	0x06
000200   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000202   ec5e     call    0x0018bc, 0x0call    0x0018bc, 0x0 	CALL	__mulint
000204   f00c
000206   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000208   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00020a   f001
00020c   0e04     movlw   0x04             	MOVLW	0x04
00020e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000210   0ea1     movlw   0xa1             	MOVLW	LOW(_msgs)
000212   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000214   0e00     movlw   0x00             	MOVLW	HIGH(_msgs)
000216   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000218   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00021a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00021c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00021e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000220   0e00     movlw   0x00             	MOVLW	0x00
000222   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000224   0e03     movlw   0x03             	MOVLW	0x03
000226   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000228   ec5e     call    0x0018bc, 0x0call    0x0018bc, 0x0 	CALL	__mulint
00022a   f00c
00022c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00022e   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
000230   f003
000232   0e04     movlw   0x04             	MOVLW	0x04
000234   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000236   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000238   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00023a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00023c   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00023e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000240   ffe9
000242   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000244   ffea
000246   cfee     movff   0xfee, 0x000     	MOVFF	POSTINC0, r0x00
000248   f000
00024a   cfee     movff   0xfee, 0x001     	MOVFF	POSTINC0, r0x01
00024c   f001
00024e   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000250   f002
000252   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000254   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000256   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000258   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00025a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00025c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00025e   ecae     call    0x00195c, 0x0call    0x00195c, 0x0 	CALL	_lcdString
000260   f00c
000262   0e03     movlw   0x03             	MOVLW	0x03
000264   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	39; output.c	lcdCommand(0xC0);
000266   0ec0     movlw   0xc0             	MOVLW	0xc0
000268   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00026a   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_lcdCommand
00026c   f00e
00026e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	40; output.c	if (getLanguage() == 0) {
000270   ec3b     call    0x002a76, 0x0call    0x002a76, 0x0 	CALL	_getLanguage
000272   f015
000274   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000276   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000278   e110     bnz     0x00029a         	BNZ	_00115_DS_
                                           ;	.line	41; output.c	lcdString("Portugues       ");
00027a   0e00     movlw   0x00             	MOVLW	UPPER(___str_1)
00027c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00027e   0e18     movlw   0x18             	MOVLW	HIGH(___str_1)
000280   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000282   0e38     movlw   0x38             	MOVLW	LOW(___str_1)
000284   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000286   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000288   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00028a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00028c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00028e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000290   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000292   ecae     call    0x00195c, 0x0call    0x00195c, 0x0 	CALL	_lcdString
000294   f00c
000296   0e03     movlw   0x03             	MOVLW	0x03
000298   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00115_DS_:
                                           ;	.line	43; output.c	if (getLanguage() == 1) {
00029a   ec3b     call    0x002a76, 0x0call    0x002a76, 0x0 	CALL	_getLanguage
00029c   f015
00029e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0002a0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0002a2   0a01     xorlw   0x01             	XORLW	0x01
0002a4   e110     bnz     0x0002c6         	BNZ	_00120_DS_
                                           ;	.line	44; output.c	lcdString("English         ");
0002a6   0e00     movlw   0x00             	MOVLW	UPPER(___str_2)
0002a8   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0002aa   0e18     movlw   0x18             	MOVLW	HIGH(___str_2)
0002ac   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0002ae   0e4a     movlw   0x4a             	MOVLW	LOW(___str_2)
0002b0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0002b2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0002b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002b6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0002b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002ba   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0002bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002be   ecae     call    0x00195c, 0x0call    0x00195c, 0x0 	CALL	_lcdString
0002c0   f00c
0002c2   0e03     movlw   0x03             	MOVLW	0x03
0002c4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00120_DS_:
0002c6   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0002c8   f007
0002ca   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0002cc   f006
0002ce   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0002d0   f005
0002d2   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0002d4   f004
0002d6   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0002d8   f003
0002da   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0002dc   f002
0002de   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0002e0   f001
0002e2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0002e4   f000
0002e6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0002e8   ffd9
0002ea   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_output__outputInit	code
                                           _outputInit:
                                           ;	.line	16; output.c	void outputInit(void) {
00181a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00181c   ffe5
00181e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001820   ffd9
                                           ;	.line	17; output.c	lcdInit();
001822   ec67     call    0x0016ce, 0x0call    0x0016ce, 0x0 	CALL	_lcdInit
001824   f00b
001826   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001828   ffd9
00182a   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           ___str_0:
00182c   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
00182e   2020     addwfc  0x20, 0x0, 0x0   
001830   2020     addwfc  0x20, 0x0, 0x0   
001832   2020     addwfc  0x20, 0x0, 0x0   
001834   2020     addwfc  0x20, 0x0, 0x0   
001836   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_1:
001838   6f50     movwf   0x50, 0x1        	DB	0x50, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0x65, 0x73, 0x20, 0x20, 0x20
00183a   7472     btg     0x72, 0x2, 0x0   
00183c   6775     tstfsz  0x75, 0x1        
00183e   6575     cpfsgt  0x75, 0x1        
001840   2073     addwfc  0x73, 0x0, 0x0   
001842   2020     addwfc  0x20, 0x0, 0x0   
001844   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
001846   2020     addwfc  0x20, 0x0, 0x0   
001848   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_2:
00184a   6e45     movwf   0x45, 0x0        	DB	0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x20, 0x20, 0x20, 0x20
00184c   6c67     negf    0x67, 0x0        
00184e   7369     btg     0x69, 0x1, 0x1   
001850   2068     addwfc  0x68, 0x0, 0x0   
001852   2020     addwfc  0x20, 0x0, 0x0   
001854   2020     addwfc  0x20, 0x0, 0x0   
001856   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
001858   2020     addwfc  0x20, 0x0, 0x0   
00185a   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_3:
00185c   6c41     negf    0x41, 0x0        	DB	0x41, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x72, 0x20, 0x61, 0x6c, 0x61, 0x72
00185e   6574     cpfsgt  0x74, 0x1        
001860   6172     cpfslt  0x72, 0x1        
001862   2072     addwfc  0x72, 0x0, 0x0   
001864   6c61     negf    0x61, 0x0        
001866   7261     btg     0x61, 0x1, 0x0   
001868   656d     cpfsgt  0x6d, 0x1        	DB	0x6d, 0x65, 0x20, 0x00
00186a   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_4:
00186c   6843     setf    0x43, 0x0        	DB	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d
00186e   6e61     movwf   0x61, 0x0        
001870   6567     cpfsgt  0x67, 0x1        
001872   6120     cpfslt  0x20, 0x1        
001874   616c     cpfslt  0x6c, 0x1        
001876   6d72     negf    0x72, 0x1        
001878   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x00
00187a   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_5:
00187c   6c41     negf    0x41, 0x0        	DB	0x41, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x72, 0x20, 0x74, 0x65, 0x6d, 0x70
00187e   6574     cpfsgt  0x74, 0x1        
001880   6172     cpfslt  0x72, 0x1        
001882   2072     addwfc  0x72, 0x0, 0x0   
001884   6574     cpfsgt  0x74, 0x1        
001886   706d     btg     0x6d, 0x0, 0x0   
001888   206f     addwfc  0x6f, 0x0, 0x0   	DB	0x6f, 0x20, 0x20, 0x00
00188a   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_6:
00188c   6843     setf    0x43, 0x0        	DB	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20
00188e   6e61     movwf   0x61, 0x0        
001890   6567     cpfsgt  0x67, 0x1        
001892   7420     btg     0x20, 0x2, 0x0   
001894   6d69     negf    0x69, 0x1        
001896   2065     addwfc  0x65, 0x0, 0x0   
001898   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x00
00189a   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_7:
00189c   6c41     negf    0x41, 0x0        	DB	0x41, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x72, 0x20, 0x69, 0x64, 0x69, 0x6f
00189e   6574     cpfsgt  0x74, 0x1        
0018a0   6172     cpfslt  0x72, 0x1        
0018a2   2072     addwfc  0x72, 0x0, 0x0   
0018a4   6469     cpfsgt  0x69, 0x0        
0018a6   6f69     movwf   0x69, 0x1        
0018a8   616d     cpfslt  0x6d, 0x1        	DB	0x6d, 0x61, 0x20, 0x00
0018aa   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_8:
0018ac   6843     setf    0x43, 0x0        	DB	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75
0018ae   6e61     movwf   0x61, 0x0        
0018b0   6567     cpfsgt  0x67, 0x1        
0018b2   6c20     negf    0x20, 0x0        
0018b4   6e61     movwf   0x61, 0x0        
0018b6   7567     btg     0x67, 0x2, 0x1   
0018b8   6761     tstfsz  0x61, 0x1        	DB	0x61, 0x67, 0x65, 0x00
0018ba   0065     dw      0x0065           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  796 (0x031c) bytes ( 0.61%)
                                           ;           	  398 (0x018e) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    8 (0x0008) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_varInit
                                           	global	_getState
                                           	global	_setState
                                           	global	_getTime
                                           	global	_setTime
                                           	global	_getAlarmLevel
                                           	global	_setAlarmLevel
                                           	global	_getLanguage
                                           	global	_setLanguage
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           
                                           udata_var_0	udata
                                           _state	res	1
                                           
                                           udata_var_1	udata
                                           _language	res	1
                                           
                                           udata_var_2	udata
                                           _time	res	2
                                           
                                           udata_var_3	udata
                                           _alarmLevel	res	2
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_var__setLanguage	code
                                           _setLanguage:
                                           ;	.line	43; var.c	void setLanguage(char newLanguage){
0028ea   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0028ec   ffe5
0028ee   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0028f0   ffd9
0028f2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0028f4   ffe5
0028f6   0e02     movlw   0x02             	MOVLW	0x02
0028f8   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0028fa   f000
                                           ;	.line	46; var.c	language = newLanguage%2;
0028fc   0e01     movlw   0x01             	MOVLW	0x01
0028fe   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
002900   0100     movlb   0x0              	BANKSEL	_language
002902   6fcc     movwf   0xcc, 0x1        	MOVWF	_language, B
002904   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002906   f000
002908   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00290a   ffd9
00290c   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_var__getLanguage	code
                                           _getLanguage:
                                           ;	.line	40; var.c	char getLanguage(void){
002a76   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a78   ffe5
002a7a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a7c   ffd9
002a7e   0100     movlb   0x0              	BANKSEL	_language
                                           ;	.line	41; var.c	return language;
002a80   51cc     movf    0xcc, 0x0, 0x1   	MOVF	_language, W, B
002a82   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a84   ffd9
002a86   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_var__setAlarmLevel	code
                                           _setAlarmLevel:
                                           ;	.line	35; var.c	void setAlarmLevel(int newAlarmLevel) {
002990   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002992   ffe5
002994   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002996   ffd9
002998   0e02     movlw   0x02             	MOVLW	0x02
00299a   cfdb     movff   0xfdb, 0x0ba     	MOVFF	PLUSW2, _alarmLevel
00299c   f0ba
00299e   0e03     movlw   0x03             	MOVLW	0x03
0029a0   cfdb     movff   0xfdb, 0x0bb     	MOVFF	PLUSW2, (_alarmLevel + 1)
0029a2   f0bb
                                           ;	.line	36; var.c	alarmLevel = newAlarmLevel;
0029a4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029a6   ffd9
0029a8   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_var__getAlarmLevel	code
                                           _getAlarmLevel:
                                           ;	.line	32; var.c	int getAlarmLevel(void) {
002a24   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a26   ffe5
002a28   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a2a   ffd9
                                           ;	.line	33; var.c	return alarmLevel;
002a2c   c0bb     movff   0x0bb, 0xff3     	MOVFF	(_alarmLevel + 1), PRODL
002a2e   fff3
002a30   0100     movlb   0x0              	BANKSEL	_alarmLevel
002a32   51ba     movf    0xba, 0x0, 0x1   	MOVF	_alarmLevel, W, B
002a34   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a36   ffd9
002a38   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_var__setTime	code
                                           _setTime:
                                           ;	.line	27; var.c	void setTime(int newTime) {
0029aa   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0029ac   ffe5
0029ae   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0029b0   ffd9
0029b2   0e02     movlw   0x02             	MOVLW	0x02
0029b4   cfdb     movff   0xfdb, 0x0b8     	MOVFF	PLUSW2, _time
0029b6   f0b8
0029b8   0e03     movlw   0x03             	MOVLW	0x03
0029ba   cfdb     movff   0xfdb, 0x0b9     	MOVFF	PLUSW2, (_time + 1)
0029bc   f0b9
                                           ;	.line	28; var.c	time = newTime;
0029be   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029c0   ffd9
0029c2   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_var__getTime	code
                                           _getTime:
                                           ;	.line	24; var.c	int getTime(void) {
002a3a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a3c   ffe5
002a3e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a40   ffd9
                                           ;	.line	25; var.c	return time;
002a42   c0b9     movff   0x0b9, 0xff3     	MOVFF	(_time + 1), PRODL
002a44   fff3
002a46   0100     movlb   0x0              	BANKSEL	_time
002a48   51b8     movf    0xb8, 0x0, 0x1   	MOVF	_time, W, B
002a4a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a4c   ffd9
002a4e   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_var__setState	code
                                           _setState:
                                           ;	.line	19; var.c	void setState(char newState) {
002a50   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a52   ffe5
002a54   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a56   ffd9
002a58   0e02     movlw   0x02             	MOVLW	0x02
002a5a   cfdb     movff   0xfdb, 0x0cb     	MOVFF	PLUSW2, _state
002a5c   f0cb
                                           ;	.line	20; var.c	state = newState;
002a5e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a60   ffd9
002a62   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_var__getState	code
                                           _getState:
                                           ;	.line	16; var.c	char getState(void) {
002a88   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a8a   ffe5
002a8c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a8e   ffd9
002a90   0100     movlb   0x0              	BANKSEL	_state
                                           ;	.line	17; var.c	return state;
002a92   51cb     movf    0xcb, 0x0, 0x1   	MOVF	_state, W, B
002a94   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a96   ffd9
002a98   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_var__varInit	code
                                           _varInit:
                                           ;	.line	9; var.c	void varInit(void) {
002876   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002878   ffe5
00287a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00287c   ffd9
00287e   0100     movlb   0x0              	BANKSEL	_state
                                           ;	.line	10; var.c	state = 0;
002880   6bcb     clrf    0xcb, 0x1        	CLRF	_state, B
                                           ;	.line	11; var.c	time = 1000;
002882   0ee8     movlw   0xe8             	MOVLW	0xe8
002884   0100     movlb   0x0              	BANKSEL	_time
002886   6fb8     movwf   0xb8, 0x1        	MOVWF	_time, B
002888   0e03     movlw   0x03             	MOVLW	0x03
00288a   0100     movlb   0x0              	BANKSEL	(_time + 1)
00288c   6fb9     movwf   0xb9, 0x1        	MOVWF	(_time + 1), B
00288e   0100     movlb   0x0              	BANKSEL	_alarmLevel
                                           ;	.line	12; var.c	alarmLevel = 512;
002890   6bba     clrf    0xba, 0x1        	CLRF	_alarmLevel, B
002892   0e02     movlw   0x02             	MOVLW	0x02
002894   0100     movlb   0x0              	BANKSEL	(_alarmLevel + 1)
002896   6fbb     movwf   0xbb, 0x1        	MOVWF	(_alarmLevel + 1), B
002898   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00289a   ffd9
00289c   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  228 (0x00e4) bytes ( 0.17%)
                                           ;           	  114 (0x0072) words
                                           ; udata size:	    6 (0x0006) bytes ( 0.47%)
                                           ; access size:	    1 (0x0001) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_eventInit
                                           	global	_eventRead
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_kpRead
                                           	extern	_kpInit
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           udata_event_0	udata
                                           _key_ant	res	2
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_event__eventRead	code
                                           _eventRead:
                                           ;	.line	12; event.c	unsigned int eventRead(void) {
001a92   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001a94   ffe5
001a96   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001a98   ffd9
001a9a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001a9c   ffe5
001a9e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001aa0   ffe5
001aa2   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001aa4   ffe5
001aa6   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001aa8   ffe5
001aaa   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001aac   ffe5
001aae   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001ab0   ffe5
                                           ;	.line	14; event.c	int ev = EV_NOEVENT;
001ab2   0e05     movlw   0x05             	MOVLW	0x05
001ab4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001ab6   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           ;	.line	15; event.c	key = kpRead();
001ab8   ec32     call    0x002a64, 0x0call    0x002a64, 0x0 	CALL	_kpRead
001aba   f015
001abc   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001abe   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           ;	.line	16; event.c	if (key != key_ant) {
001ac0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001ac2   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001ac4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001ac6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001ac8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001aca   0100     movlb   0x0              	BANKSEL	_key_ant
001acc   19bc     xorwf   0xbc, 0x0, 0x1   	XORWF	_key_ant, W, B
001ace   e104     bnz     0x001ad8         	BNZ	_00133_DS_
001ad0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001ad2   0100     movlb   0x0              	BANKSEL	(_key_ant + 1)
001ad4   19bd     xorwf   0xbd, 0x0, 0x1   	XORWF	(_key_ant + 1), W, B
001ad6   e00f     bz      0x001af6         	BZ	_00117_DS_
                                           _00133_DS_:
                                           ;	.line	17; event.c	if (BitTst(key, 0)) {
001ad8   a002     btfss   0x02, 0x0, 0x0   	BTFSS	r0x02, 0
001ada   d003     bra     0x001ae2         	BRA	_00111_DS_
                                           ;	.line	18; event.c	ev = EV_RIGHT;
001adc   0e03     movlw   0x03             	MOVLW	0x03
001ade   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001ae0   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00111_DS_:
                                           ;	.line	21; event.c	if (BitTst(key, 1)) {
001ae2   a202     btfss   0x02, 0x1, 0x0   	BTFSS	r0x02, 1
001ae4   d003     bra     0x001aec         	BRA	_00113_DS_
                                           ;	.line	22; event.c	ev = EV_LEFT;
001ae6   0e02     movlw   0x02             	MOVLW	0x02
001ae8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001aea   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00113_DS_:
                                           ;	.line	25; event.c	if (BitTst(key, 2)) {
001aec   a402     btfss   0x02, 0x2, 0x0   	BTFSS	r0x02, 2
001aee   d003     bra     0x001af6         	BRA	_00117_DS_
                                           ;	.line	26; event.c	ev = EV_ENTER;
001af0   0e04     movlw   0x04             	MOVLW	0x04
001af2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001af4   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00117_DS_:
                                           ;	.line	30; event.c	key_ant = key;
001af6   c002     movff   0x002, 0x0bc     	MOVFF	r0x02, _key_ant
001af8   f0bc
001afa   c003     movff   0x003, 0x0bd     	MOVFF	r0x03, (_key_ant + 1)
001afc   f0bd
                                           ;	.line	31; event.c	return ev;
001afe   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001b00   fff3
001b02   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b04   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001b06   f005
001b08   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001b0a   f004
001b0c   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001b0e   f003
001b10   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001b12   f002
001b14   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001b16   f001
001b18   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001b1a   f000
001b1c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001b1e   ffd9
001b20   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_event__eventInit	code
                                           _eventInit:
                                           ;	.line	7; event.c	void eventInit(void) {
0029c4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0029c6   ffe5
0029c8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0029ca   ffd9
                                           ;	.line	8; event.c	kpInit();
0029cc   ec76     call    0x0026ec, 0x0call    0x0026ec, 0x0 	CALL	_kpInit
0029ce   f013
0029d0   0100     movlb   0x0              	BANKSEL	_key_ant
                                           ;	.line	9; event.c	key_ant = 0;
0029d2   6bbc     clrf    0xbc, 0x1        	CLRF	_key_ant, B
0029d4   0100     movlb   0x0              	BANKSEL	(_key_ant + 1)
0029d6   6bbd     clrf    0xbd, 0x1        	CLRF	(_key_ant + 1), B
0029d8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029da   ffd9
0029dc   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  170 (0x00aa) bytes ( 0.13%)
                                           ;           	   85 (0x0055) words
                                           ; udata size:	    2 (0x0002) bytes ( 0.16%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_smInit
                                           	global	_smLoop
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_getState
                                           	extern	_setState
                                           	extern	_getTime
                                           	extern	_setTime
                                           	extern	_getAlarmLevel
                                           	extern	_setAlarmLevel
                                           	extern	_getLanguage
                                           	extern	_setLanguage
                                           	extern	_eventRead
                                           	extern	_outputPrint
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_stateMachine__smLoop	code
                                           _smLoop:
                                           ;	.line	12; stateMachine.c	void smLoop(void) {
0007cc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0007ce   ffe5
0007d0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0007d2   ffd9
0007d4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0007d6   ffe5
0007d8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0007da   ffe5
0007dc   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0007de   ffe5
0007e0   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0007e2   ffe5
                                           ;	.line	16; stateMachine.c	evento = eventRead();
0007e4   ec49     call    0x001a92, 0x0call    0x001a92, 0x0 	CALL	_eventRead
0007e6   f00d
0007e8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0007ea   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0007ec   f001
                                           ;	.line	18; stateMachine.c	switch (getState()) {
0007ee   ec44     call    0x002a88, 0x0call    0x002a88, 0x0 	CALL	_getState
0007f0   f015
0007f2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0007f4   0e03     movlw   0x03             	MOVLW	0x03
0007f6   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
0007f8   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0007fa   d092     bra     0x000920         	BRA	_00131_DS_
0007fc   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
0007fe   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
000800   3401     rlcf    0x01, 0x0, 0x0   	RLCF	r0x01, W
000802   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
000804   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
000806   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
000808   0bfc     andlw   0xfc             	ANDLW	0xfc
00080a   0f1a     addlw   0x1a             	ADDLW	LOW(_00165_DS_)
00080c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00080e   0e08     movlw   0x08             	MOVLW	HIGH(_00165_DS_)
000810   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
000812   0e00     movlw   0x00             	MOVLW	UPPER(_00165_DS_)
000814   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
000816   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
000818   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00165_DS_:
00081a   ef13     goto    0x000826         	GOTO	_00110_DS_
00081c   f004
00081e   ef42     goto    0x000884         	GOTO	_00117_DS_
000820   f004
000822   ef70     goto    0x0008e0         	GOTO	_00124_DS_
000824   f004
                                           _00110_DS_:
                                           ;	.line	21; stateMachine.c	if (evento == EV_RIGHT) {
000826   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000828   0a03     xorlw   0x03             	XORLW	0x03
00082a   e10f     bnz     0x00084a         	BNZ	_00112_DS_
                                           ;	.line	22; stateMachine.c	setAlarmLevel(getAlarmLevel() + 1);
00082c   ec12     call    0x002a24, 0x0call    0x002a24, 0x0 	CALL	_getAlarmLevel
00082e   f015
000830   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000832   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
000834   f002
000836   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
000838   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
00083a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00083c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00083e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000840   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000842   ecc8     call    0x002990, 0x0call    0x002990, 0x0 	CALL	_setAlarmLevel
000844   f014
000846   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000848   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00112_DS_:
                                           ;	.line	24; stateMachine.c	if (evento == EV_LEFT) {
00084a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00084c   0a02     xorlw   0x02             	XORLW	0x02
00084e   e110     bnz     0x000870         	BNZ	_00114_DS_
                                           ;	.line	25; stateMachine.c	setAlarmLevel(getAlarmLevel() - 1);
000850   ec12     call    0x002a24, 0x0call    0x002a24, 0x0 	CALL	_getAlarmLevel
000852   f015
000854   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000856   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
000858   f002
00085a   0eff     movlw   0xff             	MOVLW	0xff
00085c   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
00085e   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
000860   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000862   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000864   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000866   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000868   ecc8     call    0x002990, 0x0call    0x002990, 0x0 	CALL	_setAlarmLevel
00086a   f014
00086c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00086e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00114_DS_:
                                           ;	.line	29; stateMachine.c	if (evento == EV_ENTER) {
000870   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000872   0a04     xorlw   0x04             	XORLW	0x04
000874   e001     bz      0x000878         	BZ	_00171_DS_
000876   d054     bra     0x000920         	BRA	_00131_DS_
                                           _00171_DS_:
                                           ;	.line	30; stateMachine.c	setState(STATE_TEMPO);
000878   0e01     movlw   0x01             	MOVLW	0x01
00087a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00087c   ec28     call    0x002a50, 0x0call    0x002a50, 0x0 	CALL	_setState
00087e   f015
000880   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	32; stateMachine.c	break;
000882   d04e     bra     0x000920         	BRA	_00131_DS_
                                           _00117_DS_:
                                           ;	.line	36; stateMachine.c	if (evento == EV_RIGHT) {
000884   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000886   0a03     xorlw   0x03             	XORLW	0x03
000888   e10f     bnz     0x0008a8         	BNZ	_00119_DS_
                                           ;	.line	37; stateMachine.c	setTime(getTime() + 1);
00088a   ec1d     call    0x002a3a, 0x0call    0x002a3a, 0x0 	CALL	_getTime
00088c   f015
00088e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000890   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
000892   f002
000894   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
000896   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
000898   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00089a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00089c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00089e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008a0   ecd5     call    0x0029aa, 0x0call    0x0029aa, 0x0 	CALL	_setTime
0008a2   f014
0008a4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0008a6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00119_DS_:
                                           ;	.line	39; stateMachine.c	if (evento == EV_LEFT) {
0008a8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008aa   0a02     xorlw   0x02             	XORLW	0x02
0008ac   e110     bnz     0x0008ce         	BNZ	_00121_DS_
                                           ;	.line	40; stateMachine.c	setTime(getTime() - 1);
0008ae   ec1d     call    0x002a3a, 0x0call    0x002a3a, 0x0 	CALL	_getTime
0008b0   f015
0008b2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0008b4   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0008b6   f002
0008b8   0eff     movlw   0xff             	MOVLW	0xff
0008ba   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
0008bc   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0008be   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0008c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008c2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0008c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008c6   ecd5     call    0x0029aa, 0x0call    0x0029aa, 0x0 	CALL	_setTime
0008c8   f014
0008ca   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0008cc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00121_DS_:
                                           ;	.line	44; stateMachine.c	if (evento == EV_ENTER) {
0008ce   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008d0   0a04     xorlw   0x04             	XORLW	0x04
0008d2   e126     bnz     0x000920         	BNZ	_00131_DS_
                                           ;	.line	45; stateMachine.c	setState(STATE_IDIOMA);
0008d4   0e02     movlw   0x02             	MOVLW	0x02
0008d6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008d8   ec28     call    0x002a50, 0x0call    0x002a50, 0x0 	CALL	_setState
0008da   f015
0008dc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	47; stateMachine.c	break;
0008de   d020     bra     0x000920         	BRA	_00131_DS_
                                           _00124_DS_:
                                           ;	.line	52; stateMachine.c	if (evento == EV_RIGHT) {
0008e0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008e2   0a03     xorlw   0x03             	XORLW	0x03
0008e4   e109     bnz     0x0008f8         	BNZ	_00126_DS_
                                           ;	.line	53; stateMachine.c	setLanguage(getLanguage() + 1);
0008e6   ec3b     call    0x002a76, 0x0call    0x002a76, 0x0 	CALL	_getLanguage
0008e8   f015
0008ea   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0008ec   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0008ee   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0008f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008f2   ec75     call    0x0028ea, 0x0call    0x0028ea, 0x0 	CALL	_setLanguage
0008f4   f014
0008f6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00126_DS_:
                                           ;	.line	55; stateMachine.c	if (evento == EV_LEFT) {
0008f8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008fa   0a02     xorlw   0x02             	XORLW	0x02
0008fc   e109     bnz     0x000910         	BNZ	_00128_DS_
                                           ;	.line	56; stateMachine.c	setLanguage(getLanguage() - 1);
0008fe   ec3b     call    0x002a76, 0x0call    0x002a76, 0x0 	CALL	_getLanguage
000900   f015
000902   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000904   0601     decf    0x01, 0x1, 0x0   	DECF	r0x01, F
000906   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000908   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00090a   ec75     call    0x0028ea, 0x0call    0x0028ea, 0x0 	CALL	_setLanguage
00090c   f014
00090e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00128_DS_:
                                           ;	.line	60; stateMachine.c	if (evento == EV_ENTER) {
000910   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000912   0a04     xorlw   0x04             	XORLW	0x04
000914   e105     bnz     0x000920         	BNZ	_00131_DS_
                                           ;	.line	61; stateMachine.c	setState(STATE_ALARME);
000916   0e00     movlw   0x00             	MOVLW	0x00
000918   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00091a   ec28     call    0x002a50, 0x0call    0x002a50, 0x0 	CALL	_setState
00091c   f015
00091e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00131_DS_:
                                           ;	.line	66; stateMachine.c	outputPrint(getState(), getLanguage());
000920   ec44     call    0x002a88, 0x0call    0x002a88, 0x0 	CALL	_getState
000922   f015
000924   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000926   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000928   ec3b     call    0x002a76, 0x0call    0x002a76, 0x0 	CALL	_getLanguage
00092a   f015
00092c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00092e   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000930   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000932   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000934   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000936   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000938   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00093a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00093c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00093e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000940   ec02     call    0x000004, 0x0call    0x000004, 0x0 	CALL	_outputPrint
000942   f000
000944   0e04     movlw   0x04             	MOVLW	0x04
000946   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000948   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00094a   f003
00094c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00094e   f002
000950   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000952   f001
000954   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000956   f000
000958   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00095a   ffd9
00095c   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_stateMachine__smInit	code
                                           _smInit:
                                           ;	.line	8; stateMachine.c	void smInit(void) {
0029de   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0029e0   ffe5
0029e2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0029e4   ffd9
                                           ;	.line	9; stateMachine.c	setState(STATE_TEMPO);
0029e6   0e01     movlw   0x01             	MOVLW	0x01
0029e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029ea   ec28     call    0x002a50, 0x0call    0x002a50, 0x0 	CALL	_setState
0029ec   f015
0029ee   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0029f0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029f2   ffd9
0029f4   0012     return  0x0              	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  426 (0x01aa) bytes ( 0.33%)
                                           ;           	  213 (0x00d5) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
